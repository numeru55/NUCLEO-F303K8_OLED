
NUCLEO-F303K8_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003070  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  080031f8  080031f8  000131f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003438  08003438  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003438  08003438  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003438  08003438  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003438  08003438  00013438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800343c  0800343c  0001343c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000000f4  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000104  20000104  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cac2  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001af7  00000000  00000000  0002cb02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000980  00000000  00000000  0002e600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008d8  00000000  00000000  0002ef80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019eff  00000000  00000000  0002f858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d134  00000000  00000000  00049757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097e65  00000000  00000000  0005688b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000ee6f0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000267c  00000000  00000000  000ee744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080031e0 	.word	0x080031e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080031e0 	.word	0x080031e0

080001c8 <OLED_command>:
uint16_t _address = 0x78;
// char _address = 0x3c; // for Arduino

uint8_t I2C_DATA[2]; // max character width 5dot + data

void OLED_command(char command) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af02      	add	r7, sp, #8
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
	I2C_DATA[0] = 0;
 80001d2:	4b0a      	ldr	r3, [pc, #40]	; (80001fc <OLED_command+0x34>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	701a      	strb	r2, [r3, #0]
	I2C_DATA[1] = command;
 80001d8:	4a08      	ldr	r2, [pc, #32]	; (80001fc <OLED_command+0x34>)
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)_address,  (uint8_t *)I2C_DATA, 2, 300);
 80001de:	4b08      	ldr	r3, [pc, #32]	; (8000200 <OLED_command+0x38>)
 80001e0:	8819      	ldrh	r1, [r3, #0]
 80001e2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80001e6:	9300      	str	r3, [sp, #0]
 80001e8:	2302      	movs	r3, #2
 80001ea:	4a04      	ldr	r2, [pc, #16]	; (80001fc <OLED_command+0x34>)
 80001ec:	4805      	ldr	r0, [pc, #20]	; (8000204 <OLED_command+0x3c>)
 80001ee:	f000 ff23 	bl	8001038 <HAL_I2C_Master_Transmit>
}
 80001f2:	bf00      	nop
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	20000078 	.word	0x20000078
 8000200:	20000000 	.word	0x20000000
 8000204:	2000002c 	.word	0x2000002c

08000208 <OLED_data>:

void OLED_data(char data) {
 8000208:	b580      	push	{r7, lr}
 800020a:	b084      	sub	sp, #16
 800020c:	af02      	add	r7, sp, #8
 800020e:	4603      	mov	r3, r0
 8000210:	71fb      	strb	r3, [r7, #7]
	I2C_DATA[0] = 0x40;
 8000212:	4b0a      	ldr	r3, [pc, #40]	; (800023c <OLED_data+0x34>)
 8000214:	2240      	movs	r2, #64	; 0x40
 8000216:	701a      	strb	r2, [r3, #0]
	I2C_DATA[1] = data;
 8000218:	4a08      	ldr	r2, [pc, #32]	; (800023c <OLED_data+0x34>)
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)_address, (uint8_t *) I2C_DATA, 2, 300);
 800021e:	4b08      	ldr	r3, [pc, #32]	; (8000240 <OLED_data+0x38>)
 8000220:	8819      	ldrh	r1, [r3, #0]
 8000222:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000226:	9300      	str	r3, [sp, #0]
 8000228:	2302      	movs	r3, #2
 800022a:	4a04      	ldr	r2, [pc, #16]	; (800023c <OLED_data+0x34>)
 800022c:	4805      	ldr	r0, [pc, #20]	; (8000244 <OLED_data+0x3c>)
 800022e:	f000 ff03 	bl	8001038 <HAL_I2C_Master_Transmit>
}
 8000232:	bf00      	nop
 8000234:	3708      	adds	r7, #8
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	20000078 	.word	0x20000078
 8000240:	20000000 	.word	0x20000000
 8000244:	2000002c 	.word	0x2000002c

08000248 <OLED_Init>:

void OLED_Init() {
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	OLED_command(OLED_DISPLAYOFF);         // 0xAE
 800024c:	20ae      	movs	r0, #174	; 0xae
 800024e:	f7ff ffbb 	bl	80001c8 <OLED_command>
	OLED_command(OLED_SETDISPLAYCLOCKDIV); // 0xD5
 8000252:	20d5      	movs	r0, #213	; 0xd5
 8000254:	f7ff ffb8 	bl	80001c8 <OLED_command>
	OLED_command(0x80);                    // the suggested ratio 0x80
 8000258:	2080      	movs	r0, #128	; 0x80
 800025a:	f7ff ffb5 	bl	80001c8 <OLED_command>
	OLED_command(OLED_SETMULTIPLEX);       // 0xA8
 800025e:	20a8      	movs	r0, #168	; 0xa8
 8000260:	f7ff ffb2 	bl	80001c8 <OLED_command>

#if OLED_HEIGHT == 32
	OLED_command(0x1F);
 8000264:	201f      	movs	r0, #31
 8000266:	f7ff ffaf 	bl	80001c8 <OLED_command>
#elif OLED_HEIGHT == 64
	OLED_command(0x7F);
	#endif

	OLED_command(OLED_SETDISPLAYOFFSET);   // 0xD3
 800026a:	20d3      	movs	r0, #211	; 0xd3
 800026c:	f7ff ffac 	bl	80001c8 <OLED_command>
	OLED_command(0x0);                     // no offset
 8000270:	2000      	movs	r0, #0
 8000272:	f7ff ffa9 	bl	80001c8 <OLED_command>
	OLED_command(OLED_SETSTARTLINE | 0x0); // line #0
 8000276:	2040      	movs	r0, #64	; 0x40
 8000278:	f7ff ffa6 	bl	80001c8 <OLED_command>
	OLED_command(OLED_CHARGEPUMP);         // 0x8D
 800027c:	208d      	movs	r0, #141	; 0x8d
 800027e:	f7ff ffa3 	bl	80001c8 <OLED_command>
	OLED_command(0xAF);
 8000282:	20af      	movs	r0, #175	; 0xaf
 8000284:	f7ff ffa0 	bl	80001c8 <OLED_command>
	OLED_command(OLED_MEMORYMODE); // 0x20
 8000288:	2020      	movs	r0, #32
 800028a:	f7ff ff9d 	bl	80001c8 <OLED_command>
	OLED_command(0x00);            // 0x0 act like ks0108
 800028e:	2000      	movs	r0, #0
 8000290:	f7ff ff9a 	bl	80001c8 <OLED_command>
	OLED_command(OLED_SEGREMAP | 0x1);
 8000294:	20a1      	movs	r0, #161	; 0xa1
 8000296:	f7ff ff97 	bl	80001c8 <OLED_command>
	OLED_command(OLED_COMSCANDEC);
 800029a:	20c8      	movs	r0, #200	; 0xc8
 800029c:	f7ff ff94 	bl	80001c8 <OLED_command>
	OLED_command(OLED_SETCOMPINS); // 0xDA
 80002a0:	20da      	movs	r0, #218	; 0xda
 80002a2:	f7ff ff91 	bl	80001c8 <OLED_command>

#if OLED_HEIGHT == 32
	OLED_command(0x02);
 80002a6:	2002      	movs	r0, #2
 80002a8:	f7ff ff8e 	bl	80001c8 <OLED_command>
#elif OLED_HEIGHT == 64
OLED_command(0x12);
#endif

	OLED_command(OLED_SETCONTRAST); // 0x81
 80002ac:	2081      	movs	r0, #129	; 0x81
 80002ae:	f7ff ff8b 	bl	80001c8 <OLED_command>

#if OLED_HEIGHT == 32
	OLED_command(0x8F);
 80002b2:	208f      	movs	r0, #143	; 0x8f
 80002b4:	f7ff ff88 	bl	80001c8 <OLED_command>
#elif OLED_HEIGHT == 64
	OLED_command(0x9F);
#endif

	OLED_command(OLED_SETPRECHARGE); // 0xd9
 80002b8:	20d9      	movs	r0, #217	; 0xd9
 80002ba:	f7ff ff85 	bl	80001c8 <OLED_command>
	OLED_command(0xF1);
 80002be:	20f1      	movs	r0, #241	; 0xf1
 80002c0:	f7ff ff82 	bl	80001c8 <OLED_command>
	OLED_command(OLED_SETVCOMDETECT); // 0xDB
 80002c4:	20db      	movs	r0, #219	; 0xdb
 80002c6:	f7ff ff7f 	bl	80001c8 <OLED_command>
	OLED_command(0x40);
 80002ca:	2040      	movs	r0, #64	; 0x40
 80002cc:	f7ff ff7c 	bl	80001c8 <OLED_command>
	OLED_command(OLED_DISPLAYALLON_RESUME); // 0xA4
 80002d0:	20a4      	movs	r0, #164	; 0xa4
 80002d2:	f7ff ff79 	bl	80001c8 <OLED_command>
	OLED_command(OLED_NORMALDISPLAY);       // 0xA6
 80002d6:	20a6      	movs	r0, #166	; 0xa6
 80002d8:	f7ff ff76 	bl	80001c8 <OLED_command>
	OLED_command(OLED_DISPLAYON);           //--turn on oled panel
 80002dc:	20af      	movs	r0, #175	; 0xaf
 80002de:	f7ff ff73 	bl	80001c8 <OLED_command>
}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}

080002e6 <OLED_write_bit>:

void OLED_write_bit(char ch, int x, int y) {
 80002e6:	b580      	push	{r7, lr}
 80002e8:	b084      	sub	sp, #16
 80002ea:	af00      	add	r7, sp, #0
 80002ec:	4603      	mov	r3, r0
 80002ee:	60b9      	str	r1, [r7, #8]
 80002f0:	607a      	str	r2, [r7, #4]
 80002f2:	73fb      	strb	r3, [r7, #15]
	OLED_command(0x20);            //
 80002f4:	2020      	movs	r0, #32
 80002f6:	f7ff ff67 	bl	80001c8 <OLED_command>
	OLED_command(0x02);            // Page addressing mode
 80002fa:	2002      	movs	r0, #2
 80002fc:	f7ff ff64 	bl	80001c8 <OLED_command>
	OLED_command(y + 0xB0);        // Set page start addres
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	b2db      	uxtb	r3, r3
 8000304:	3b50      	subs	r3, #80	; 0x50
 8000306:	b2db      	uxtb	r3, r3
 8000308:	4618      	mov	r0, r3
 800030a:	f7ff ff5d 	bl	80001c8 <OLED_command>
	OLED_command(x & 0x0F);        // Set lower column start address
 800030e:	68bb      	ldr	r3, [r7, #8]
 8000310:	b2db      	uxtb	r3, r3
 8000312:	f003 030f 	and.w	r3, r3, #15
 8000316:	b2db      	uxtb	r3, r3
 8000318:	4618      	mov	r0, r3
 800031a:	f7ff ff55 	bl	80001c8 <OLED_command>
	OLED_command(0x10 + (x >> 4)); // Set higher column start address
 800031e:	68bb      	ldr	r3, [r7, #8]
 8000320:	111b      	asrs	r3, r3, #4
 8000322:	b2db      	uxtb	r3, r3
 8000324:	3310      	adds	r3, #16
 8000326:	b2db      	uxtb	r3, r3
 8000328:	4618      	mov	r0, r3
 800032a:	f7ff ff4d 	bl	80001c8 <OLED_command>

	OLED_data(ch);
 800032e:	7bfb      	ldrb	r3, [r7, #15]
 8000330:	4618      	mov	r0, r3
 8000332:	f7ff ff69 	bl	8000208 <OLED_data>
}
 8000336:	bf00      	nop
 8000338:	3710      	adds	r7, #16
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}

0800033e <OLED_clear>:

void OLED_clear() {
 800033e:	b580      	push	{r7, lr}
 8000340:	b082      	sub	sp, #8
 8000342:	af00      	add	r7, sp, #0
	uint8_t x = 0;
 8000344:	2300      	movs	r3, #0
 8000346:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 8000348:	2300      	movs	r3, #0
 800034a:	71bb      	strb	r3, [r7, #6]
	for (x = 0; x < 128; x++) {
 800034c:	2300      	movs	r3, #0
 800034e:	71fb      	strb	r3, [r7, #7]
 8000350:	e011      	b.n	8000376 <OLED_clear+0x38>
		for (y = 0; y < OLED_HEIGHT / 8; y++) {
 8000352:	2300      	movs	r3, #0
 8000354:	71bb      	strb	r3, [r7, #6]
 8000356:	e008      	b.n	800036a <OLED_clear+0x2c>
			OLED_write_bit(0, x, y);
 8000358:	79fb      	ldrb	r3, [r7, #7]
 800035a:	79ba      	ldrb	r2, [r7, #6]
 800035c:	4619      	mov	r1, r3
 800035e:	2000      	movs	r0, #0
 8000360:	f7ff ffc1 	bl	80002e6 <OLED_write_bit>
		for (y = 0; y < OLED_HEIGHT / 8; y++) {
 8000364:	79bb      	ldrb	r3, [r7, #6]
 8000366:	3301      	adds	r3, #1
 8000368:	71bb      	strb	r3, [r7, #6]
 800036a:	79bb      	ldrb	r3, [r7, #6]
 800036c:	2b03      	cmp	r3, #3
 800036e:	d9f3      	bls.n	8000358 <OLED_clear+0x1a>
	for (x = 0; x < 128; x++) {
 8000370:	79fb      	ldrb	r3, [r7, #7]
 8000372:	3301      	adds	r3, #1
 8000374:	71fb      	strb	r3, [r7, #7]
 8000376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800037a:	2b00      	cmp	r3, #0
 800037c:	dae9      	bge.n	8000352 <OLED_clear+0x14>
		}
	}
}
 800037e:	bf00      	nop
 8000380:	bf00      	nop
 8000382:	3708      	adds	r7, #8
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <OLED_char6>:

// x: 0 to 127
// y: 0 to 3 or 7

void OLED_char6(char ch, int x, int y) {
 8000388:	b580      	push	{r7, lr}
 800038a:	b086      	sub	sp, #24
 800038c:	af00      	add	r7, sp, #0
 800038e:	4603      	mov	r3, r0
 8000390:	60b9      	str	r1, [r7, #8]
 8000392:	607a      	str	r2, [r7, #4]
 8000394:	73fb      	strb	r3, [r7, #15]

	int table_offset = (ch - ' ') * 5;
 8000396:	7bfb      	ldrb	r3, [r7, #15]
 8000398:	f1a3 0220 	sub.w	r2, r3, #32
 800039c:	4613      	mov	r3, r2
 800039e:	009b      	lsls	r3, r3, #2
 80003a0:	4413      	add	r3, r2
 80003a2:	613b      	str	r3, [r7, #16]

	for (int i = 0; i < 5; i++) {
 80003a4:	2300      	movs	r3, #0
 80003a6:	617b      	str	r3, [r7, #20]
 80003a8:	e00e      	b.n	80003c8 <OLED_char6+0x40>
		OLED_write_bit(OLED_characters[i + table_offset], x + i, y);
 80003aa:	697a      	ldr	r2, [r7, #20]
 80003ac:	693b      	ldr	r3, [r7, #16]
 80003ae:	4413      	add	r3, r2
 80003b0:	4a09      	ldr	r2, [pc, #36]	; (80003d8 <OLED_char6+0x50>)
 80003b2:	5cd0      	ldrb	r0, [r2, r3]
 80003b4:	68ba      	ldr	r2, [r7, #8]
 80003b6:	697b      	ldr	r3, [r7, #20]
 80003b8:	4413      	add	r3, r2
 80003ba:	687a      	ldr	r2, [r7, #4]
 80003bc:	4619      	mov	r1, r3
 80003be:	f7ff ff92 	bl	80002e6 <OLED_write_bit>
	for (int i = 0; i < 5; i++) {
 80003c2:	697b      	ldr	r3, [r7, #20]
 80003c4:	3301      	adds	r3, #1
 80003c6:	617b      	str	r3, [r7, #20]
 80003c8:	697b      	ldr	r3, [r7, #20]
 80003ca:	2b04      	cmp	r3, #4
 80003cc:	dded      	ble.n	80003aa <OLED_char6+0x22>
	}

}
 80003ce:	bf00      	nop
 80003d0:	bf00      	nop
 80003d2:	3718      	adds	r7, #24
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	08003224 	.word	0x08003224

080003dc <OLED_string6>:

void OLED_string6(char *str, int x, int y) {
 80003dc:	b580      	push	{r7, lr}
 80003de:	b088      	sub	sp, #32
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	60f8      	str	r0, [r7, #12]
 80003e4:	60b9      	str	r1, [r7, #8]
 80003e6:	607a      	str	r2, [r7, #4]

	int pos = 0;
 80003e8:	2300      	movs	r3, #0
 80003ea:	61fb      	str	r3, [r7, #28]
	int startx = x;
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	61bb      	str	r3, [r7, #24]
	int starty = y;
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	617b      	str	r3, [r7, #20]
	while (str[pos] != '\0') {
 80003f4:	e016      	b.n	8000424 <OLED_string6+0x48>
		OLED_char6(str[pos], startx, starty);
 80003f6:	69fb      	ldr	r3, [r7, #28]
 80003f8:	68fa      	ldr	r2, [r7, #12]
 80003fa:	4413      	add	r3, r2
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	697a      	ldr	r2, [r7, #20]
 8000400:	69b9      	ldr	r1, [r7, #24]
 8000402:	4618      	mov	r0, r3
 8000404:	f7ff ffc0 	bl	8000388 <OLED_char6>
		if (startx >= 123) {
 8000408:	69bb      	ldr	r3, [r7, #24]
 800040a:	2b7a      	cmp	r3, #122	; 0x7a
 800040c:	dd04      	ble.n	8000418 <OLED_string6+0x3c>
			starty++;
 800040e:	697b      	ldr	r3, [r7, #20]
 8000410:	3301      	adds	r3, #1
 8000412:	617b      	str	r3, [r7, #20]
			startx = 0;
 8000414:	2300      	movs	r3, #0
 8000416:	61bb      	str	r3, [r7, #24]
		} //wrap around
		startx += 6;
 8000418:	69bb      	ldr	r3, [r7, #24]
 800041a:	3306      	adds	r3, #6
 800041c:	61bb      	str	r3, [r7, #24]
		pos += 1;
 800041e:	69fb      	ldr	r3, [r7, #28]
 8000420:	3301      	adds	r3, #1
 8000422:	61fb      	str	r3, [r7, #28]
	while (str[pos] != '\0') {
 8000424:	69fb      	ldr	r3, [r7, #28]
 8000426:	68fa      	ldr	r2, [r7, #12]
 8000428:	4413      	add	r3, r2
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d1e2      	bne.n	80003f6 <OLED_string6+0x1a>
	}
}
 8000430:	bf00      	nop
 8000432:	bf00      	nop
 8000434:	3720      	adds	r7, #32
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
	...

0800043c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000442:	f000 fa6f 	bl	8000924 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000446:	f000 f843 	bl	80004d0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800044a:	f000 f909 	bl	8000660 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800044e:	f000 f8d7 	bl	8000600 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8000452:	f000 f895 	bl	8000580 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	OLED_Init();
 8000456:	f7ff fef7 	bl	8000248 <OLED_Init>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		OLED_clear();
 800045a:	f7ff ff70 	bl	800033e <OLED_clear>

		for (int i = 0; i < 3; i++) {
 800045e:	2300      	movs	r3, #0
 8000460:	607b      	str	r3, [r7, #4]
 8000462:	e012      	b.n	800048a <main+0x4e>
			HAL_GPIO_WritePin(PB3_GPIO_Port, PB3_Pin, 1);
 8000464:	2201      	movs	r2, #1
 8000466:	2108      	movs	r1, #8
 8000468:	4815      	ldr	r0, [pc, #84]	; (80004c0 <main+0x84>)
 800046a:	f000 fd3d 	bl	8000ee8 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 800046e:	2064      	movs	r0, #100	; 0x64
 8000470:	f000 fabe 	bl	80009f0 <HAL_Delay>
			HAL_GPIO_WritePin(PB3_GPIO_Port, PB3_Pin, 0);
 8000474:	2200      	movs	r2, #0
 8000476:	2108      	movs	r1, #8
 8000478:	4811      	ldr	r0, [pc, #68]	; (80004c0 <main+0x84>)
 800047a:	f000 fd35 	bl	8000ee8 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 800047e:	2064      	movs	r0, #100	; 0x64
 8000480:	f000 fab6 	bl	80009f0 <HAL_Delay>
		for (int i = 0; i < 3; i++) {
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	3301      	adds	r3, #1
 8000488:	607b      	str	r3, [r7, #4]
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	2b02      	cmp	r3, #2
 800048e:	dde9      	ble.n	8000464 <main+0x28>
		}

		//           12345678901234567890
		OLED_string6("   Booting...", 0, 0);
 8000490:	2200      	movs	r2, #0
 8000492:	2100      	movs	r1, #0
 8000494:	480b      	ldr	r0, [pc, #44]	; (80004c4 <main+0x88>)
 8000496:	f7ff ffa1 	bl	80003dc <OLED_string6>
		HAL_Delay(2000);
 800049a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800049e:	f000 faa7 	bl	80009f0 <HAL_Delay>

		OLED_string6("    Nucleo", 0, 2);
 80004a2:	2202      	movs	r2, #2
 80004a4:	2100      	movs	r1, #0
 80004a6:	4808      	ldr	r0, [pc, #32]	; (80004c8 <main+0x8c>)
 80004a8:	f7ff ff98 	bl	80003dc <OLED_string6>
		OLED_string6("      by HAL.", 0, 3);
 80004ac:	2203      	movs	r2, #3
 80004ae:	2100      	movs	r1, #0
 80004b0:	4806      	ldr	r0, [pc, #24]	; (80004cc <main+0x90>)
 80004b2:	f7ff ff93 	bl	80003dc <OLED_string6>
		HAL_Delay(1000);
 80004b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004ba:	f000 fa99 	bl	80009f0 <HAL_Delay>
		OLED_clear();
 80004be:	e7cc      	b.n	800045a <main+0x1e>
 80004c0:	48000400 	.word	0x48000400
 80004c4:	080031f8 	.word	0x080031f8
 80004c8:	08003208 	.word	0x08003208
 80004cc:	08003214 	.word	0x08003214

080004d0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b096      	sub	sp, #88	; 0x58
 80004d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80004d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004da:	2228      	movs	r2, #40	; 0x28
 80004dc:	2100      	movs	r1, #0
 80004de:	4618      	mov	r0, r3
 80004e0:	f002 fe76 	bl	80031d0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80004e4:	f107 031c 	add.w	r3, r7, #28
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]
 80004f0:	60da      	str	r2, [r3, #12]
 80004f2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	605a      	str	r2, [r3, #4]
 80004fc:	609a      	str	r2, [r3, #8]
 80004fe:	60da      	str	r2, [r3, #12]
 8000500:	611a      	str	r2, [r3, #16]
 8000502:	615a      	str	r2, [r3, #20]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000504:	2302      	movs	r3, #2
 8000506:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000508:	2301      	movs	r3, #1
 800050a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800050c:	2310      	movs	r3, #16
 800050e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000510:	2302      	movs	r3, #2
 8000512:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000514:	2300      	movs	r3, #0
 8000516:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000518:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800051c:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800051e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000522:	4618      	mov	r0, r3
 8000524:	f001 f898 	bl	8001658 <HAL_RCC_OscConfig>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <SystemClock_Config+0x62>
		Error_Handler();
 800052e:	f000 f8e1 	bl	80006f4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000532:	230f      	movs	r3, #15
 8000534:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000536:	2302      	movs	r3, #2
 8000538:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800053a:	2300      	movs	r3, #0
 800053c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800053e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000542:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000544:	2300      	movs	r3, #0
 8000546:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000548:	f107 031c 	add.w	r3, r7, #28
 800054c:	2102      	movs	r1, #2
 800054e:	4618      	mov	r0, r3
 8000550:	f001 ff8a 	bl	8002468 <HAL_RCC_ClockConfig>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <SystemClock_Config+0x8e>
		Error_Handler();
 800055a:	f000 f8cb 	bl	80006f4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800055e:	2320      	movs	r3, #32
 8000560:	607b      	str	r3, [r7, #4]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8000562:	2310      	movs	r3, #16
 8000564:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	4618      	mov	r0, r3
 800056a:	f002 f9b3 	bl	80028d4 <HAL_RCCEx_PeriphCLKConfig>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <SystemClock_Config+0xa8>
		Error_Handler();
 8000574:	f000 f8be 	bl	80006f4 <Error_Handler>
	}
}
 8000578:	bf00      	nop
 800057a:	3758      	adds	r7, #88	; 0x58
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000584:	4b1b      	ldr	r3, [pc, #108]	; (80005f4 <MX_I2C1_Init+0x74>)
 8000586:	4a1c      	ldr	r2, [pc, #112]	; (80005f8 <MX_I2C1_Init+0x78>)
 8000588:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00602173;
 800058a:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <MX_I2C1_Init+0x74>)
 800058c:	4a1b      	ldr	r2, [pc, #108]	; (80005fc <MX_I2C1_Init+0x7c>)
 800058e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000590:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <MX_I2C1_Init+0x74>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000596:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <MX_I2C1_Init+0x74>)
 8000598:	2201      	movs	r2, #1
 800059a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800059c:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <MX_I2C1_Init+0x74>)
 800059e:	2200      	movs	r2, #0
 80005a0:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80005a2:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <MX_I2C1_Init+0x74>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005a8:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <MX_I2C1_Init+0x74>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <MX_I2C1_Init+0x74>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005b4:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <MX_I2C1_Init+0x74>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80005ba:	480e      	ldr	r0, [pc, #56]	; (80005f4 <MX_I2C1_Init+0x74>)
 80005bc:	f000 fcac 	bl	8000f18 <HAL_I2C_Init>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_I2C1_Init+0x4a>
		Error_Handler();
 80005c6:	f000 f895 	bl	80006f4 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80005ca:	2100      	movs	r1, #0
 80005cc:	4809      	ldr	r0, [pc, #36]	; (80005f4 <MX_I2C1_Init+0x74>)
 80005ce:	f000 ffab 	bl	8001528 <HAL_I2CEx_ConfigAnalogFilter>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80005d8:	f000 f88c 	bl	80006f4 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80005dc:	2100      	movs	r1, #0
 80005de:	4805      	ldr	r0, [pc, #20]	; (80005f4 <MX_I2C1_Init+0x74>)
 80005e0:	f000 ffed 	bl	80015be <HAL_I2CEx_ConfigDigitalFilter>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_I2C1_Init+0x6e>
		Error_Handler();
 80005ea:	f000 f883 	bl	80006f4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	2000002c 	.word	0x2000002c
 80005f8:	40005400 	.word	0x40005400
 80005fc:	00602173 	.word	0x00602173

08000600 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000604:	4b14      	ldr	r3, [pc, #80]	; (8000658 <MX_USART2_UART_Init+0x58>)
 8000606:	4a15      	ldr	r2, [pc, #84]	; (800065c <MX_USART2_UART_Init+0x5c>)
 8000608:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 38400;
 800060a:	4b13      	ldr	r3, [pc, #76]	; (8000658 <MX_USART2_UART_Init+0x58>)
 800060c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000610:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000612:	4b11      	ldr	r3, [pc, #68]	; (8000658 <MX_USART2_UART_Init+0x58>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000618:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <MX_USART2_UART_Init+0x58>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <MX_USART2_UART_Init+0x58>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <MX_USART2_UART_Init+0x58>)
 8000626:	220c      	movs	r2, #12
 8000628:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800062a:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <MX_USART2_UART_Init+0x58>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000630:	4b09      	ldr	r3, [pc, #36]	; (8000658 <MX_USART2_UART_Init+0x58>)
 8000632:	2200      	movs	r2, #0
 8000634:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <MX_USART2_UART_Init+0x58>)
 8000638:	2200      	movs	r2, #0
 800063a:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <MX_USART2_UART_Init+0x58>)
 800063e:	2200      	movs	r2, #0
 8000640:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000642:	4805      	ldr	r0, [pc, #20]	; (8000658 <MX_USART2_UART_Init+0x58>)
 8000644:	f002 fa6c 	bl	8002b20 <HAL_UART_Init>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 800064e:	f000 f851 	bl	80006f4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	2000007c 	.word	0x2000007c
 800065c:	40004400 	.word	0x40004400

08000660 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b088      	sub	sp, #32
 8000664:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000666:	f107 030c 	add.w	r3, r7, #12
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000676:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <MX_GPIO_Init+0x8c>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	4a1c      	ldr	r2, [pc, #112]	; (80006ec <MX_GPIO_Init+0x8c>)
 800067c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000680:	6153      	str	r3, [r2, #20]
 8000682:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <MX_GPIO_Init+0x8c>)
 8000684:	695b      	ldr	r3, [r3, #20]
 8000686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	4b17      	ldr	r3, [pc, #92]	; (80006ec <MX_GPIO_Init+0x8c>)
 8000690:	695b      	ldr	r3, [r3, #20]
 8000692:	4a16      	ldr	r2, [pc, #88]	; (80006ec <MX_GPIO_Init+0x8c>)
 8000694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000698:	6153      	str	r3, [r2, #20]
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <MX_GPIO_Init+0x8c>)
 800069c:	695b      	ldr	r3, [r3, #20]
 800069e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_GPIO_Init+0x8c>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	4a10      	ldr	r2, [pc, #64]	; (80006ec <MX_GPIO_Init+0x8c>)
 80006ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006b0:	6153      	str	r3, [r2, #20]
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_GPIO_Init+0x8c>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(PB3_GPIO_Port, PB3_Pin, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2108      	movs	r1, #8
 80006c2:	480b      	ldr	r0, [pc, #44]	; (80006f0 <MX_GPIO_Init+0x90>)
 80006c4:	f000 fc10 	bl	8000ee8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PB3_Pin */
	GPIO_InitStruct.Pin = PB3_Pin;
 80006c8:	2308      	movs	r3, #8
 80006ca:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(PB3_GPIO_Port, &GPIO_InitStruct);
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	4619      	mov	r1, r3
 80006de:	4804      	ldr	r0, [pc, #16]	; (80006f0 <MX_GPIO_Init+0x90>)
 80006e0:	f000 fa90 	bl	8000c04 <HAL_GPIO_Init>

}
 80006e4:	bf00      	nop
 80006e6:	3720      	adds	r7, #32
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40021000 	.word	0x40021000
 80006f0:	48000400 	.word	0x48000400

080006f4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f8:	b672      	cpsid	i
}
 80006fa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80006fc:	e7fe      	b.n	80006fc <Error_Handler+0x8>
	...

08000700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000706:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <HAL_MspInit+0x44>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	4a0e      	ldr	r2, [pc, #56]	; (8000744 <HAL_MspInit+0x44>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6193      	str	r3, [r2, #24]
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <HAL_MspInit+0x44>)
 8000714:	699b      	ldr	r3, [r3, #24]
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <HAL_MspInit+0x44>)
 8000720:	69db      	ldr	r3, [r3, #28]
 8000722:	4a08      	ldr	r2, [pc, #32]	; (8000744 <HAL_MspInit+0x44>)
 8000724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000728:	61d3      	str	r3, [r2, #28]
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <HAL_MspInit+0x44>)
 800072c:	69db      	ldr	r3, [r3, #28]
 800072e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	40021000 	.word	0x40021000

08000748 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	; 0x28
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a17      	ldr	r2, [pc, #92]	; (80007c4 <HAL_I2C_MspInit+0x7c>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d127      	bne.n	80007ba <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <HAL_I2C_MspInit+0x80>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	4a16      	ldr	r2, [pc, #88]	; (80007c8 <HAL_I2C_MspInit+0x80>)
 8000770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000774:	6153      	str	r3, [r2, #20]
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <HAL_I2C_MspInit+0x80>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000782:	23c0      	movs	r3, #192	; 0xc0
 8000784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000786:	2312      	movs	r3, #18
 8000788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800078e:	2303      	movs	r3, #3
 8000790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000792:	2304      	movs	r3, #4
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	4619      	mov	r1, r3
 800079c:	480b      	ldr	r0, [pc, #44]	; (80007cc <HAL_I2C_MspInit+0x84>)
 800079e:	f000 fa31 	bl	8000c04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <HAL_I2C_MspInit+0x80>)
 80007a4:	69db      	ldr	r3, [r3, #28]
 80007a6:	4a08      	ldr	r2, [pc, #32]	; (80007c8 <HAL_I2C_MspInit+0x80>)
 80007a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007ac:	61d3      	str	r3, [r2, #28]
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_I2C_MspInit+0x80>)
 80007b0:	69db      	ldr	r3, [r3, #28]
 80007b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80007ba:	bf00      	nop
 80007bc:	3728      	adds	r7, #40	; 0x28
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40005400 	.word	0x40005400
 80007c8:	40021000 	.word	0x40021000
 80007cc:	48000400 	.word	0x48000400

080007d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a18      	ldr	r2, [pc, #96]	; (8000850 <HAL_UART_MspInit+0x80>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d129      	bne.n	8000846 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007f2:	4b18      	ldr	r3, [pc, #96]	; (8000854 <HAL_UART_MspInit+0x84>)
 80007f4:	69db      	ldr	r3, [r3, #28]
 80007f6:	4a17      	ldr	r2, [pc, #92]	; (8000854 <HAL_UART_MspInit+0x84>)
 80007f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007fc:	61d3      	str	r3, [r2, #28]
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <HAL_UART_MspInit+0x84>)
 8000800:	69db      	ldr	r3, [r3, #28]
 8000802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	4b12      	ldr	r3, [pc, #72]	; (8000854 <HAL_UART_MspInit+0x84>)
 800080c:	695b      	ldr	r3, [r3, #20]
 800080e:	4a11      	ldr	r2, [pc, #68]	; (8000854 <HAL_UART_MspInit+0x84>)
 8000810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000814:	6153      	str	r3, [r2, #20]
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <HAL_UART_MspInit+0x84>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000822:	f248 0304 	movw	r3, #32772	; 0x8004
 8000826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000828:	2302      	movs	r3, #2
 800082a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000830:	2303      	movs	r3, #3
 8000832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000834:	2307      	movs	r3, #7
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4619      	mov	r1, r3
 800083e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000842:	f000 f9df 	bl	8000c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000846:	bf00      	nop
 8000848:	3728      	adds	r7, #40	; 0x28
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40004400 	.word	0x40004400
 8000854:	40021000 	.word	0x40021000

08000858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800085c:	e7fe      	b.n	800085c <NMI_Handler+0x4>

0800085e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <HardFault_Handler+0x4>

08000864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <MemManage_Handler+0x4>

0800086a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086e:	e7fe      	b.n	800086e <BusFault_Handler+0x4>

08000870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <UsageFault_Handler+0x4>

08000876 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a4:	f000 f884 	bl	80009b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}

080008ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <SystemInit+0x20>)
 80008b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008b6:	4a05      	ldr	r2, [pc, #20]	; (80008cc <SystemInit+0x20>)
 80008b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000908 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d4:	480d      	ldr	r0, [pc, #52]	; (800090c <LoopForever+0x6>)
  ldr r1, =_edata
 80008d6:	490e      	ldr	r1, [pc, #56]	; (8000910 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008d8:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <LoopForever+0xe>)
  movs r3, #0
 80008da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008dc:	e002      	b.n	80008e4 <LoopCopyDataInit>

080008de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008e2:	3304      	adds	r3, #4

080008e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e8:	d3f9      	bcc.n	80008de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ea:	4a0b      	ldr	r2, [pc, #44]	; (8000918 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008ec:	4c0b      	ldr	r4, [pc, #44]	; (800091c <LoopForever+0x16>)
  movs r3, #0
 80008ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f0:	e001      	b.n	80008f6 <LoopFillZerobss>

080008f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f4:	3204      	adds	r2, #4

080008f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f8:	d3fb      	bcc.n	80008f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008fa:	f7ff ffd7 	bl	80008ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008fe:	f002 fc43 	bl	8003188 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000902:	f7ff fd9b 	bl	800043c <main>

08000906 <LoopForever>:

LoopForever:
    b LoopForever
 8000906:	e7fe      	b.n	8000906 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000908:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800090c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000910:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000914:	08003440 	.word	0x08003440
  ldr r2, =_sbss
 8000918:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800091c:	20000104 	.word	0x20000104

08000920 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000920:	e7fe      	b.n	8000920 <ADC1_2_IRQHandler>
	...

08000924 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <HAL_Init+0x28>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a07      	ldr	r2, [pc, #28]	; (800094c <HAL_Init+0x28>)
 800092e:	f043 0310 	orr.w	r3, r3, #16
 8000932:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000934:	2003      	movs	r0, #3
 8000936:	f000 f931 	bl	8000b9c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800093a:	2000      	movs	r0, #0
 800093c:	f000 f808 	bl	8000950 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000940:	f7ff fede 	bl	8000700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000944:	2300      	movs	r3, #0
}
 8000946:	4618      	mov	r0, r3
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40022000 	.word	0x40022000

08000950 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <HAL_InitTick+0x54>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <HAL_InitTick+0x58>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	4619      	mov	r1, r3
 8000962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000966:	fbb3 f3f1 	udiv	r3, r3, r1
 800096a:	fbb2 f3f3 	udiv	r3, r2, r3
 800096e:	4618      	mov	r0, r3
 8000970:	f000 f93b 	bl	8000bea <HAL_SYSTICK_Config>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800097a:	2301      	movs	r3, #1
 800097c:	e00e      	b.n	800099c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2b0f      	cmp	r3, #15
 8000982:	d80a      	bhi.n	800099a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000984:	2200      	movs	r2, #0
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800098c:	f000 f911 	bl	8000bb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000990:	4a06      	ldr	r2, [pc, #24]	; (80009ac <HAL_InitTick+0x5c>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000996:	2300      	movs	r3, #0
 8000998:	e000      	b.n	800099c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
}
 800099c:	4618      	mov	r0, r3
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000004 	.word	0x20000004
 80009a8:	2000000c 	.word	0x2000000c
 80009ac:	20000008 	.word	0x20000008

080009b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_IncTick+0x20>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	461a      	mov	r2, r3
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_IncTick+0x24>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4413      	add	r3, r2
 80009c0:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <HAL_IncTick+0x24>)
 80009c2:	6013      	str	r3, [r2, #0]
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	2000000c 	.word	0x2000000c
 80009d4:	20000100 	.word	0x20000100

080009d8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  return uwTick;  
 80009dc:	4b03      	ldr	r3, [pc, #12]	; (80009ec <HAL_GetTick+0x14>)
 80009de:	681b      	ldr	r3, [r3, #0]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	20000100 	.word	0x20000100

080009f0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009f8:	f7ff ffee 	bl	80009d8 <HAL_GetTick>
 80009fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a08:	d005      	beq.n	8000a16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a0a:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <HAL_Delay+0x44>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	4413      	add	r3, r2
 8000a14:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a16:	bf00      	nop
 8000a18:	f7ff ffde 	bl	80009d8 <HAL_GetTick>
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	68fa      	ldr	r2, [r7, #12]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d8f7      	bhi.n	8000a18 <HAL_Delay+0x28>
  {
  }
}
 8000a28:	bf00      	nop
 8000a2a:	bf00      	nop
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	2000000c 	.word	0x2000000c

08000a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <__NVIC_SetPriorityGrouping+0x44>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a4e:	68ba      	ldr	r2, [r7, #8]
 8000a50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a54:	4013      	ands	r3, r2
 8000a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a6a:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <__NVIC_SetPriorityGrouping+0x44>)
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	60d3      	str	r3, [r2, #12]
}
 8000a70:	bf00      	nop
 8000a72:	3714      	adds	r7, #20
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a84:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <__NVIC_GetPriorityGrouping+0x18>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	0a1b      	lsrs	r3, r3, #8
 8000a8a:	f003 0307 	and.w	r3, r3, #7
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	6039      	str	r1, [r7, #0]
 8000aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	db0a      	blt.n	8000ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	490c      	ldr	r1, [pc, #48]	; (8000ae8 <__NVIC_SetPriority+0x4c>)
 8000ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aba:	0112      	lsls	r2, r2, #4
 8000abc:	b2d2      	uxtb	r2, r2
 8000abe:	440b      	add	r3, r1
 8000ac0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ac4:	e00a      	b.n	8000adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4908      	ldr	r1, [pc, #32]	; (8000aec <__NVIC_SetPriority+0x50>)
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	f003 030f 	and.w	r3, r3, #15
 8000ad2:	3b04      	subs	r3, #4
 8000ad4:	0112      	lsls	r2, r2, #4
 8000ad6:	b2d2      	uxtb	r2, r2
 8000ad8:	440b      	add	r3, r1
 8000ada:	761a      	strb	r2, [r3, #24]
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000e100 	.word	0xe000e100
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b089      	sub	sp, #36	; 0x24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	f1c3 0307 	rsb	r3, r3, #7
 8000b0a:	2b04      	cmp	r3, #4
 8000b0c:	bf28      	it	cs
 8000b0e:	2304      	movcs	r3, #4
 8000b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3304      	adds	r3, #4
 8000b16:	2b06      	cmp	r3, #6
 8000b18:	d902      	bls.n	8000b20 <NVIC_EncodePriority+0x30>
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3b03      	subs	r3, #3
 8000b1e:	e000      	b.n	8000b22 <NVIC_EncodePriority+0x32>
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	43da      	mvns	r2, r3
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	401a      	ands	r2, r3
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b42:	43d9      	mvns	r1, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	4313      	orrs	r3, r2
         );
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3724      	adds	r7, #36	; 0x24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
	...

08000b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b68:	d301      	bcc.n	8000b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e00f      	b.n	8000b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <SysTick_Config+0x40>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b76:	210f      	movs	r1, #15
 8000b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b7c:	f7ff ff8e 	bl	8000a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <SysTick_Config+0x40>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b86:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <SysTick_Config+0x40>)
 8000b88:	2207      	movs	r2, #7
 8000b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	e000e010 	.word	0xe000e010

08000b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff ff47 	bl	8000a38 <__NVIC_SetPriorityGrouping>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b086      	sub	sp, #24
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	4603      	mov	r3, r0
 8000bba:	60b9      	str	r1, [r7, #8]
 8000bbc:	607a      	str	r2, [r7, #4]
 8000bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bc4:	f7ff ff5c 	bl	8000a80 <__NVIC_GetPriorityGrouping>
 8000bc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	68b9      	ldr	r1, [r7, #8]
 8000bce:	6978      	ldr	r0, [r7, #20]
 8000bd0:	f7ff ff8e 	bl	8000af0 <NVIC_EncodePriority>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bda:	4611      	mov	r1, r2
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff5d 	bl	8000a9c <__NVIC_SetPriority>
}
 8000be2:	bf00      	nop
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f7ff ffb0 	bl	8000b58 <SysTick_Config>
 8000bf8:	4603      	mov	r3, r0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b087      	sub	sp, #28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c12:	e14e      	b.n	8000eb2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	2101      	movs	r1, #1
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c20:	4013      	ands	r3, r2
 8000c22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	f000 8140 	beq.w	8000eac <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f003 0303 	and.w	r3, r3, #3
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d005      	beq.n	8000c44 <HAL_GPIO_Init+0x40>
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f003 0303 	and.w	r3, r3, #3
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	d130      	bne.n	8000ca6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	2203      	movs	r2, #3
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	68da      	ldr	r2, [r3, #12]
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	4013      	ands	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	091b      	lsrs	r3, r3, #4
 8000c90:	f003 0201 	and.w	r2, r3, #1
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f003 0303 	and.w	r3, r3, #3
 8000cae:	2b03      	cmp	r3, #3
 8000cb0:	d017      	beq.n	8000ce2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	68db      	ldr	r3, [r3, #12]
 8000cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	689a      	ldr	r2, [r3, #8]
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 0303 	and.w	r3, r3, #3
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d123      	bne.n	8000d36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	08da      	lsrs	r2, r3, #3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	3208      	adds	r2, #8
 8000cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	220f      	movs	r2, #15
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	691a      	ldr	r2, [r3, #16]
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	f003 0307 	and.w	r3, r3, #7
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	08da      	lsrs	r2, r3, #3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3208      	adds	r2, #8
 8000d30:	6939      	ldr	r1, [r7, #16]
 8000d32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	2203      	movs	r2, #3
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f003 0203 	and.w	r2, r3, #3
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f000 809a 	beq.w	8000eac <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d78:	4b55      	ldr	r3, [pc, #340]	; (8000ed0 <HAL_GPIO_Init+0x2cc>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	4a54      	ldr	r2, [pc, #336]	; (8000ed0 <HAL_GPIO_Init+0x2cc>)
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	6193      	str	r3, [r2, #24]
 8000d84:	4b52      	ldr	r3, [pc, #328]	; (8000ed0 <HAL_GPIO_Init+0x2cc>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d90:	4a50      	ldr	r2, [pc, #320]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	089b      	lsrs	r3, r3, #2
 8000d96:	3302      	adds	r3, #2
 8000d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	f003 0303 	and.w	r3, r3, #3
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	220f      	movs	r2, #15
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4013      	ands	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000dba:	d013      	beq.n	8000de4 <HAL_GPIO_Init+0x1e0>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4a46      	ldr	r2, [pc, #280]	; (8000ed8 <HAL_GPIO_Init+0x2d4>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d00d      	beq.n	8000de0 <HAL_GPIO_Init+0x1dc>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a45      	ldr	r2, [pc, #276]	; (8000edc <HAL_GPIO_Init+0x2d8>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d007      	beq.n	8000ddc <HAL_GPIO_Init+0x1d8>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a44      	ldr	r2, [pc, #272]	; (8000ee0 <HAL_GPIO_Init+0x2dc>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d101      	bne.n	8000dd8 <HAL_GPIO_Init+0x1d4>
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	e006      	b.n	8000de6 <HAL_GPIO_Init+0x1e2>
 8000dd8:	2305      	movs	r3, #5
 8000dda:	e004      	b.n	8000de6 <HAL_GPIO_Init+0x1e2>
 8000ddc:	2302      	movs	r3, #2
 8000dde:	e002      	b.n	8000de6 <HAL_GPIO_Init+0x1e2>
 8000de0:	2301      	movs	r3, #1
 8000de2:	e000      	b.n	8000de6 <HAL_GPIO_Init+0x1e2>
 8000de4:	2300      	movs	r3, #0
 8000de6:	697a      	ldr	r2, [r7, #20]
 8000de8:	f002 0203 	and.w	r2, r2, #3
 8000dec:	0092      	lsls	r2, r2, #2
 8000dee:	4093      	lsls	r3, r2
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000df6:	4937      	ldr	r1, [pc, #220]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	089b      	lsrs	r3, r3, #2
 8000dfc:	3302      	adds	r3, #2
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e04:	4b37      	ldr	r3, [pc, #220]	; (8000ee4 <HAL_GPIO_Init+0x2e0>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4013      	ands	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d003      	beq.n	8000e28 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e28:	4a2e      	ldr	r2, [pc, #184]	; (8000ee4 <HAL_GPIO_Init+0x2e0>)
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ee4 <HAL_GPIO_Init+0x2e0>)
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	43db      	mvns	r3, r3
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d003      	beq.n	8000e52 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e52:	4a24      	ldr	r2, [pc, #144]	; (8000ee4 <HAL_GPIO_Init+0x2e0>)
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e58:	4b22      	ldr	r3, [pc, #136]	; (8000ee4 <HAL_GPIO_Init+0x2e0>)
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	43db      	mvns	r3, r3
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	4013      	ands	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d003      	beq.n	8000e7c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e7c:	4a19      	ldr	r2, [pc, #100]	; (8000ee4 <HAL_GPIO_Init+0x2e0>)
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e82:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <HAL_GPIO_Init+0x2e0>)
 8000e84:	68db      	ldr	r3, [r3, #12]
 8000e86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ea6:	4a0f      	ldr	r2, [pc, #60]	; (8000ee4 <HAL_GPIO_Init+0x2e0>)
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	f47f aea9 	bne.w	8000c14 <HAL_GPIO_Init+0x10>
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	bf00      	nop
 8000ec6:	371c      	adds	r7, #28
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40010000 	.word	0x40010000
 8000ed8:	48000400 	.word	0x48000400
 8000edc:	48000800 	.word	0x48000800
 8000ee0:	48000c00 	.word	0x48000c00
 8000ee4:	40010400 	.word	0x40010400

08000ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	807b      	strh	r3, [r7, #2]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ef8:	787b      	ldrb	r3, [r7, #1]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000efe:	887a      	ldrh	r2, [r7, #2]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f04:	e002      	b.n	8000f0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f06:	887a      	ldrh	r2, [r7, #2]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e081      	b.n	800102e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d106      	bne.n	8000f44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff fc02 	bl	8000748 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2224      	movs	r2, #36	; 0x24
 8000f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f022 0201 	bic.w	r2, r2, #1
 8000f5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685a      	ldr	r2, [r3, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f68:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f78:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d107      	bne.n	8000f92 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689a      	ldr	r2, [r3, #8]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	e006      	b.n	8000fa0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	689a      	ldr	r2, [r3, #8]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000f9e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d104      	bne.n	8000fb2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fb0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	6812      	ldr	r2, [r2, #0]
 8000fbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fc4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	68da      	ldr	r2, [r3, #12]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fd4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	691a      	ldr	r2, [r3, #16]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	430a      	orrs	r2, r1
 8000fee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	69d9      	ldr	r1, [r3, #28]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6a1a      	ldr	r2, [r3, #32]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 0201 	orr.w	r2, r2, #1
 800100e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2220      	movs	r2, #32
 800101a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af02      	add	r7, sp, #8
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	461a      	mov	r2, r3
 8001044:	460b      	mov	r3, r1
 8001046:	817b      	strh	r3, [r7, #10]
 8001048:	4613      	mov	r3, r2
 800104a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b20      	cmp	r3, #32
 8001056:	f040 80da 	bne.w	800120e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001060:	2b01      	cmp	r3, #1
 8001062:	d101      	bne.n	8001068 <HAL_I2C_Master_Transmit+0x30>
 8001064:	2302      	movs	r3, #2
 8001066:	e0d3      	b.n	8001210 <HAL_I2C_Master_Transmit+0x1d8>
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2201      	movs	r2, #1
 800106c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001070:	f7ff fcb2 	bl	80009d8 <HAL_GetTick>
 8001074:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	2319      	movs	r3, #25
 800107c:	2201      	movs	r2, #1
 800107e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001082:	68f8      	ldr	r0, [r7, #12]
 8001084:	f000 f8f0 	bl	8001268 <I2C_WaitOnFlagUntilTimeout>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e0be      	b.n	8001210 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2221      	movs	r2, #33	; 0x21
 8001096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2210      	movs	r2, #16
 800109e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2200      	movs	r2, #0
 80010a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	893a      	ldrh	r2, [r7, #8]
 80010b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2200      	movs	r2, #0
 80010b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010be:	b29b      	uxth	r3, r3
 80010c0:	2bff      	cmp	r3, #255	; 0xff
 80010c2:	d90e      	bls.n	80010e2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	22ff      	movs	r2, #255	; 0xff
 80010c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	8979      	ldrh	r1, [r7, #10]
 80010d2:	4b51      	ldr	r3, [pc, #324]	; (8001218 <HAL_I2C_Master_Transmit+0x1e0>)
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010da:	68f8      	ldr	r0, [r7, #12]
 80010dc:	f000 f9f6 	bl	80014cc <I2C_TransferConfig>
 80010e0:	e06c      	b.n	80011bc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	8979      	ldrh	r1, [r7, #10]
 80010f4:	4b48      	ldr	r3, [pc, #288]	; (8001218 <HAL_I2C_Master_Transmit+0x1e0>)
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010fc:	68f8      	ldr	r0, [r7, #12]
 80010fe:	f000 f9e5 	bl	80014cc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001102:	e05b      	b.n	80011bc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001104:	697a      	ldr	r2, [r7, #20]
 8001106:	6a39      	ldr	r1, [r7, #32]
 8001108:	68f8      	ldr	r0, [r7, #12]
 800110a:	f000 f8ed 	bl	80012e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e07b      	b.n	8001210 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111c:	781a      	ldrb	r2, [r3, #0]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	1c5a      	adds	r2, r3, #1
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001132:	b29b      	uxth	r3, r3
 8001134:	3b01      	subs	r3, #1
 8001136:	b29a      	uxth	r2, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001140:	3b01      	subs	r3, #1
 8001142:	b29a      	uxth	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800114c:	b29b      	uxth	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d034      	beq.n	80011bc <HAL_I2C_Master_Transmit+0x184>
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001156:	2b00      	cmp	r3, #0
 8001158:	d130      	bne.n	80011bc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	6a3b      	ldr	r3, [r7, #32]
 8001160:	2200      	movs	r2, #0
 8001162:	2180      	movs	r1, #128	; 0x80
 8001164:	68f8      	ldr	r0, [r7, #12]
 8001166:	f000 f87f 	bl	8001268 <I2C_WaitOnFlagUntilTimeout>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e04d      	b.n	8001210 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001178:	b29b      	uxth	r3, r3
 800117a:	2bff      	cmp	r3, #255	; 0xff
 800117c:	d90e      	bls.n	800119c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	22ff      	movs	r2, #255	; 0xff
 8001182:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001188:	b2da      	uxtb	r2, r3
 800118a:	8979      	ldrh	r1, [r7, #10]
 800118c:	2300      	movs	r3, #0
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001194:	68f8      	ldr	r0, [r7, #12]
 8001196:	f000 f999 	bl	80014cc <I2C_TransferConfig>
 800119a:	e00f      	b.n	80011bc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	8979      	ldrh	r1, [r7, #10]
 80011ae:	2300      	movs	r3, #0
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	f000 f988 	bl	80014cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d19e      	bne.n	8001104 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	6a39      	ldr	r1, [r7, #32]
 80011ca:	68f8      	ldr	r0, [r7, #12]
 80011cc:	f000 f8cc 	bl	8001368 <I2C_WaitOnSTOPFlagUntilTimeout>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e01a      	b.n	8001210 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2220      	movs	r2, #32
 80011e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6859      	ldr	r1, [r3, #4]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <HAL_I2C_Master_Transmit+0x1e4>)
 80011ee:	400b      	ands	r3, r1
 80011f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2220      	movs	r2, #32
 80011f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800120a:	2300      	movs	r3, #0
 800120c:	e000      	b.n	8001210 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800120e:	2302      	movs	r3, #2
  }
}
 8001210:	4618      	mov	r0, r3
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	80002000 	.word	0x80002000
 800121c:	fe00e800 	.word	0xfe00e800

08001220 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b02      	cmp	r3, #2
 8001234:	d103      	bne.n	800123e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2200      	movs	r2, #0
 800123c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	2b01      	cmp	r3, #1
 800124a:	d007      	beq.n	800125c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	699a      	ldr	r2, [r3, #24]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f042 0201 	orr.w	r2, r2, #1
 800125a:	619a      	str	r2, [r3, #24]
  }
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	4613      	mov	r3, r2
 8001276:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001278:	e022      	b.n	80012c0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001280:	d01e      	beq.n	80012c0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001282:	f7ff fba9 	bl	80009d8 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	429a      	cmp	r2, r3
 8001290:	d302      	bcc.n	8001298 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d113      	bne.n	80012c0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129c:	f043 0220 	orr.w	r2, r3, #32
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2220      	movs	r2, #32
 80012a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e00f      	b.n	80012e0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	699a      	ldr	r2, [r3, #24]
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	4013      	ands	r3, r2
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	bf0c      	ite	eq
 80012d0:	2301      	moveq	r3, #1
 80012d2:	2300      	movne	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	461a      	mov	r2, r3
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d0cd      	beq.n	800127a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80012de:	2300      	movs	r3, #0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80012f4:	e02c      	b.n	8001350 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	68b9      	ldr	r1, [r7, #8]
 80012fa:	68f8      	ldr	r0, [r7, #12]
 80012fc:	f000 f870 	bl	80013e0 <I2C_IsAcknowledgeFailed>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e02a      	b.n	8001360 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001310:	d01e      	beq.n	8001350 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001312:	f7ff fb61 	bl	80009d8 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	68ba      	ldr	r2, [r7, #8]
 800131e:	429a      	cmp	r2, r3
 8001320:	d302      	bcc.n	8001328 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d113      	bne.n	8001350 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132c:	f043 0220 	orr.w	r2, r3, #32
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2220      	movs	r2, #32
 8001338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e007      	b.n	8001360 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b02      	cmp	r3, #2
 800135c:	d1cb      	bne.n	80012f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001374:	e028      	b.n	80013c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	68b9      	ldr	r1, [r7, #8]
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f000 f830 	bl	80013e0 <I2C_IsAcknowledgeFailed>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e026      	b.n	80013d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800138a:	f7ff fb25 	bl	80009d8 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	429a      	cmp	r2, r3
 8001398:	d302      	bcc.n	80013a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d113      	bne.n	80013c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a4:	f043 0220 	orr.w	r2, r3, #32
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2220      	movs	r2, #32
 80013b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e007      	b.n	80013d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	f003 0320 	and.w	r3, r3, #32
 80013d2:	2b20      	cmp	r3, #32
 80013d4:	d1cf      	bne.n	8001376 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	f003 0310 	and.w	r3, r3, #16
 80013f6:	2b10      	cmp	r3, #16
 80013f8:	d161      	bne.n	80014be <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001404:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001408:	d02b      	beq.n	8001462 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001418:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800141a:	e022      	b.n	8001462 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001422:	d01e      	beq.n	8001462 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001424:	f7ff fad8 	bl	80009d8 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	429a      	cmp	r2, r3
 8001432:	d302      	bcc.n	800143a <I2C_IsAcknowledgeFailed+0x5a>
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d113      	bne.n	8001462 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	f043 0220 	orr.w	r2, r3, #32
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2220      	movs	r2, #32
 800144a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e02e      	b.n	80014c0 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	f003 0320 	and.w	r3, r3, #32
 800146c:	2b20      	cmp	r3, #32
 800146e:	d1d5      	bne.n	800141c <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2210      	movs	r2, #16
 8001476:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2220      	movs	r2, #32
 800147e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001480:	68f8      	ldr	r0, [r7, #12]
 8001482:	f7ff fecd 	bl	8001220 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6859      	ldr	r1, [r3, #4]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <I2C_IsAcknowledgeFailed+0xe8>)
 8001492:	400b      	ands	r3, r1
 8001494:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	f043 0204 	orr.w	r2, r3, #4
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2220      	movs	r2, #32
 80014a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e000      	b.n	80014c0 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	fe00e800 	.word	0xfe00e800

080014cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	460b      	mov	r3, r1
 80014d8:	817b      	strh	r3, [r7, #10]
 80014da:	4613      	mov	r3, r2
 80014dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	0d5b      	lsrs	r3, r3, #21
 80014e8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80014ec:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <I2C_TransferConfig+0x58>)
 80014ee:	430b      	orrs	r3, r1
 80014f0:	43db      	mvns	r3, r3
 80014f2:	ea02 0103 	and.w	r1, r2, r3
 80014f6:	897b      	ldrh	r3, [r7, #10]
 80014f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80014fc:	7a7b      	ldrb	r3, [r7, #9]
 80014fe:	041b      	lsls	r3, r3, #16
 8001500:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001504:	431a      	orrs	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	431a      	orrs	r2, r3
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	431a      	orrs	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	430a      	orrs	r2, r1
 8001514:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8001516:	bf00      	nop
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	03ff63ff 	.word	0x03ff63ff

08001528 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b20      	cmp	r3, #32
 800153c:	d138      	bne.n	80015b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001544:	2b01      	cmp	r3, #1
 8001546:	d101      	bne.n	800154c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001548:	2302      	movs	r3, #2
 800154a:	e032      	b.n	80015b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2224      	movs	r2, #36	; 0x24
 8001558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 0201 	bic.w	r2, r2, #1
 800156a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800157a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6819      	ldr	r1, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	430a      	orrs	r2, r1
 800158a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f042 0201 	orr.w	r2, r2, #1
 800159a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2220      	movs	r2, #32
 80015a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80015ac:	2300      	movs	r3, #0
 80015ae:	e000      	b.n	80015b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80015b0:	2302      	movs	r3, #2
  }
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80015be:	b480      	push	{r7}
 80015c0:	b085      	sub	sp, #20
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
 80015c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b20      	cmp	r3, #32
 80015d2:	d139      	bne.n	8001648 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d101      	bne.n	80015e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80015de:	2302      	movs	r3, #2
 80015e0:	e033      	b.n	800164a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2224      	movs	r2, #36	; 0x24
 80015ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 0201 	bic.w	r2, r2, #1
 8001600:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001610:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	021b      	lsls	r3, r3, #8
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	4313      	orrs	r3, r2
 800161a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f042 0201 	orr.w	r2, r2, #1
 8001632:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2220      	movs	r2, #32
 8001638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001644:	2300      	movs	r3, #0
 8001646:	e000      	b.n	800164a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001648:	2302      	movs	r3, #2
  }
}
 800164a:	4618      	mov	r0, r3
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
	...

08001658 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800165e:	af00      	add	r7, sp, #0
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d102      	bne.n	8001672 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	f000 bef4 	b.w	800245a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 816a 	beq.w	8001956 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001682:	4bb3      	ldr	r3, [pc, #716]	; (8001950 <HAL_RCC_OscConfig+0x2f8>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f003 030c 	and.w	r3, r3, #12
 800168a:	2b04      	cmp	r3, #4
 800168c:	d00c      	beq.n	80016a8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800168e:	4bb0      	ldr	r3, [pc, #704]	; (8001950 <HAL_RCC_OscConfig+0x2f8>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f003 030c 	and.w	r3, r3, #12
 8001696:	2b08      	cmp	r3, #8
 8001698:	d159      	bne.n	800174e <HAL_RCC_OscConfig+0xf6>
 800169a:	4bad      	ldr	r3, [pc, #692]	; (8001950 <HAL_RCC_OscConfig+0x2f8>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016a6:	d152      	bne.n	800174e <HAL_RCC_OscConfig+0xf6>
 80016a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016ac:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80016b4:	fa93 f3a3 	rbit	r3, r3
 80016b8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016bc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c0:	fab3 f383 	clz	r3, r3
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	095b      	lsrs	r3, r3, #5
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d102      	bne.n	80016da <HAL_RCC_OscConfig+0x82>
 80016d4:	4b9e      	ldr	r3, [pc, #632]	; (8001950 <HAL_RCC_OscConfig+0x2f8>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	e015      	b.n	8001706 <HAL_RCC_OscConfig+0xae>
 80016da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016de:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80016e6:	fa93 f3a3 	rbit	r3, r3
 80016ea:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80016ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016f2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80016f6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80016fa:	fa93 f3a3 	rbit	r3, r3
 80016fe:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001702:	4b93      	ldr	r3, [pc, #588]	; (8001950 <HAL_RCC_OscConfig+0x2f8>)
 8001704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001706:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800170a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800170e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001712:	fa92 f2a2 	rbit	r2, r2
 8001716:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800171a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800171e:	fab2 f282 	clz	r2, r2
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	f042 0220 	orr.w	r2, r2, #32
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	f002 021f 	and.w	r2, r2, #31
 800172e:	2101      	movs	r1, #1
 8001730:	fa01 f202 	lsl.w	r2, r1, r2
 8001734:	4013      	ands	r3, r2
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 810c 	beq.w	8001954 <HAL_RCC_OscConfig+0x2fc>
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f040 8106 	bne.w	8001954 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	f000 be86 	b.w	800245a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001758:	d106      	bne.n	8001768 <HAL_RCC_OscConfig+0x110>
 800175a:	4b7d      	ldr	r3, [pc, #500]	; (8001950 <HAL_RCC_OscConfig+0x2f8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a7c      	ldr	r2, [pc, #496]	; (8001950 <HAL_RCC_OscConfig+0x2f8>)
 8001760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	e030      	b.n	80017ca <HAL_RCC_OscConfig+0x172>
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d10c      	bne.n	800178c <HAL_RCC_OscConfig+0x134>
 8001772:	4b77      	ldr	r3, [pc, #476]	; (8001950 <HAL_RCC_OscConfig+0x2f8>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a76      	ldr	r2, [pc, #472]	; (8001950 <HAL_RCC_OscConfig+0x2f8>)
 8001778:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	4b74      	ldr	r3, [pc, #464]	; (8001950 <HAL_RCC_OscConfig+0x2f8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a73      	ldr	r2, [pc, #460]	; (8001950 <HAL_RCC_OscConfig+0x2f8>)
 8001784:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	e01e      	b.n	80017ca <HAL_RCC_OscConfig+0x172>
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001796:	d10c      	bne.n	80017b2 <HAL_RCC_OscConfig+0x15a>
 8001798:	4b6d      	ldr	r3, [pc, #436]	; (8001950 <HAL_RCC_OscConfig+0x2f8>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a6c      	ldr	r2, [pc, #432]	; (8001950 <HAL_RCC_OscConfig+0x2f8>)
 800179e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	4b6a      	ldr	r3, [pc, #424]	; (8001950 <HAL_RCC_OscConfig+0x2f8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a69      	ldr	r2, [pc, #420]	; (8001950 <HAL_RCC_OscConfig+0x2f8>)
 80017aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	e00b      	b.n	80017ca <HAL_RCC_OscConfig+0x172>
 80017b2:	4b67      	ldr	r3, [pc, #412]	; (8001950 <HAL_RCC_OscConfig+0x2f8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a66      	ldr	r2, [pc, #408]	; (8001950 <HAL_RCC_OscConfig+0x2f8>)
 80017b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	4b64      	ldr	r3, [pc, #400]	; (8001950 <HAL_RCC_OscConfig+0x2f8>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a63      	ldr	r2, [pc, #396]	; (8001950 <HAL_RCC_OscConfig+0x2f8>)
 80017c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017c8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017ca:	4b61      	ldr	r3, [pc, #388]	; (8001950 <HAL_RCC_OscConfig+0x2f8>)
 80017cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ce:	f023 020f 	bic.w	r2, r3, #15
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	495d      	ldr	r1, [pc, #372]	; (8001950 <HAL_RCC_OscConfig+0x2f8>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d059      	beq.n	800189c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e8:	f7ff f8f6 	bl	80009d8 <HAL_GetTick>
 80017ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f0:	e00a      	b.n	8001808 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017f2:	f7ff f8f1 	bl	80009d8 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b64      	cmp	r3, #100	; 0x64
 8001800:	d902      	bls.n	8001808 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	f000 be29 	b.w	800245a <HAL_RCC_OscConfig+0xe02>
 8001808:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800180c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001810:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001814:	fa93 f3a3 	rbit	r3, r3
 8001818:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800181c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001820:	fab3 f383 	clz	r3, r3
 8001824:	b2db      	uxtb	r3, r3
 8001826:	095b      	lsrs	r3, r3, #5
 8001828:	b2db      	uxtb	r3, r3
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	b2db      	uxtb	r3, r3
 8001830:	2b01      	cmp	r3, #1
 8001832:	d102      	bne.n	800183a <HAL_RCC_OscConfig+0x1e2>
 8001834:	4b46      	ldr	r3, [pc, #280]	; (8001950 <HAL_RCC_OscConfig+0x2f8>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	e015      	b.n	8001866 <HAL_RCC_OscConfig+0x20e>
 800183a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800183e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001842:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001846:	fa93 f3a3 	rbit	r3, r3
 800184a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800184e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001852:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001856:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800185a:	fa93 f3a3 	rbit	r3, r3
 800185e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001862:	4b3b      	ldr	r3, [pc, #236]	; (8001950 <HAL_RCC_OscConfig+0x2f8>)
 8001864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001866:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800186a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800186e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001872:	fa92 f2a2 	rbit	r2, r2
 8001876:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800187a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800187e:	fab2 f282 	clz	r2, r2
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	f042 0220 	orr.w	r2, r2, #32
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	f002 021f 	and.w	r2, r2, #31
 800188e:	2101      	movs	r1, #1
 8001890:	fa01 f202 	lsl.w	r2, r1, r2
 8001894:	4013      	ands	r3, r2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0ab      	beq.n	80017f2 <HAL_RCC_OscConfig+0x19a>
 800189a:	e05c      	b.n	8001956 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189c:	f7ff f89c 	bl	80009d8 <HAL_GetTick>
 80018a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a4:	e00a      	b.n	80018bc <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018a6:	f7ff f897 	bl	80009d8 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b64      	cmp	r3, #100	; 0x64
 80018b4:	d902      	bls.n	80018bc <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	f000 bdcf 	b.w	800245a <HAL_RCC_OscConfig+0xe02>
 80018bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018c0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80018c8:	fa93 f3a3 	rbit	r3, r3
 80018cc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80018d0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018d4:	fab3 f383 	clz	r3, r3
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	095b      	lsrs	r3, r3, #5
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d102      	bne.n	80018ee <HAL_RCC_OscConfig+0x296>
 80018e8:	4b19      	ldr	r3, [pc, #100]	; (8001950 <HAL_RCC_OscConfig+0x2f8>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	e015      	b.n	800191a <HAL_RCC_OscConfig+0x2c2>
 80018ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018f2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80018fa:	fa93 f3a3 	rbit	r3, r3
 80018fe:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001902:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001906:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800190a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800190e:	fa93 f3a3 	rbit	r3, r3
 8001912:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001916:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <HAL_RCC_OscConfig+0x2f8>)
 8001918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800191e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001922:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001926:	fa92 f2a2 	rbit	r2, r2
 800192a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800192e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001932:	fab2 f282 	clz	r2, r2
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	f042 0220 	orr.w	r2, r2, #32
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	f002 021f 	and.w	r2, r2, #31
 8001942:	2101      	movs	r1, #1
 8001944:	fa01 f202 	lsl.w	r2, r1, r2
 8001948:	4013      	ands	r3, r2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1ab      	bne.n	80018a6 <HAL_RCC_OscConfig+0x24e>
 800194e:	e002      	b.n	8001956 <HAL_RCC_OscConfig+0x2fe>
 8001950:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001956:	1d3b      	adds	r3, r7, #4
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	f000 816f 	beq.w	8001c44 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001966:	4bd0      	ldr	r3, [pc, #832]	; (8001ca8 <HAL_RCC_OscConfig+0x650>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f003 030c 	and.w	r3, r3, #12
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00b      	beq.n	800198a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001972:	4bcd      	ldr	r3, [pc, #820]	; (8001ca8 <HAL_RCC_OscConfig+0x650>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 030c 	and.w	r3, r3, #12
 800197a:	2b08      	cmp	r3, #8
 800197c:	d16c      	bne.n	8001a58 <HAL_RCC_OscConfig+0x400>
 800197e:	4bca      	ldr	r3, [pc, #808]	; (8001ca8 <HAL_RCC_OscConfig+0x650>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d166      	bne.n	8001a58 <HAL_RCC_OscConfig+0x400>
 800198a:	2302      	movs	r3, #2
 800198c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001990:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001994:	fa93 f3a3 	rbit	r3, r3
 8001998:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800199c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019a0:	fab3 f383 	clz	r3, r3
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	095b      	lsrs	r3, r3, #5
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d102      	bne.n	80019ba <HAL_RCC_OscConfig+0x362>
 80019b4:	4bbc      	ldr	r3, [pc, #752]	; (8001ca8 <HAL_RCC_OscConfig+0x650>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	e013      	b.n	80019e2 <HAL_RCC_OscConfig+0x38a>
 80019ba:	2302      	movs	r3, #2
 80019bc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80019c4:	fa93 f3a3 	rbit	r3, r3
 80019c8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80019cc:	2302      	movs	r3, #2
 80019ce:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80019d2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80019d6:	fa93 f3a3 	rbit	r3, r3
 80019da:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80019de:	4bb2      	ldr	r3, [pc, #712]	; (8001ca8 <HAL_RCC_OscConfig+0x650>)
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e2:	2202      	movs	r2, #2
 80019e4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80019e8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80019ec:	fa92 f2a2 	rbit	r2, r2
 80019f0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80019f4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80019f8:	fab2 f282 	clz	r2, r2
 80019fc:	b2d2      	uxtb	r2, r2
 80019fe:	f042 0220 	orr.w	r2, r2, #32
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	f002 021f 	and.w	r2, r2, #31
 8001a08:	2101      	movs	r1, #1
 8001a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a0e:	4013      	ands	r3, r2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d007      	beq.n	8001a24 <HAL_RCC_OscConfig+0x3cc>
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d002      	beq.n	8001a24 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	f000 bd1b 	b.w	800245a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a24:	4ba0      	ldr	r3, [pc, #640]	; (8001ca8 <HAL_RCC_OscConfig+0x650>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	21f8      	movs	r1, #248	; 0xf8
 8001a34:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a38:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001a3c:	fa91 f1a1 	rbit	r1, r1
 8001a40:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001a44:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001a48:	fab1 f181 	clz	r1, r1
 8001a4c:	b2c9      	uxtb	r1, r1
 8001a4e:	408b      	lsls	r3, r1
 8001a50:	4995      	ldr	r1, [pc, #596]	; (8001ca8 <HAL_RCC_OscConfig+0x650>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a56:	e0f5      	b.n	8001c44 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 8085 	beq.w	8001b6e <HAL_RCC_OscConfig+0x516>
 8001a64:	2301      	movs	r3, #1
 8001a66:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001a6e:	fa93 f3a3 	rbit	r3, r3
 8001a72:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001a76:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a7a:	fab3 f383 	clz	r3, r3
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a90:	f7fe ffa2 	bl	80009d8 <HAL_GetTick>
 8001a94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a98:	e00a      	b.n	8001ab0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a9a:	f7fe ff9d 	bl	80009d8 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d902      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	f000 bcd5 	b.w	800245a <HAL_RCC_OscConfig+0xe02>
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001aba:	fa93 f3a3 	rbit	r3, r3
 8001abe:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001ac2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac6:	fab3 f383 	clz	r3, r3
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	095b      	lsrs	r3, r3, #5
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d102      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x488>
 8001ada:	4b73      	ldr	r3, [pc, #460]	; (8001ca8 <HAL_RCC_OscConfig+0x650>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	e013      	b.n	8001b08 <HAL_RCC_OscConfig+0x4b0>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001aea:	fa93 f3a3 	rbit	r3, r3
 8001aee:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001af2:	2302      	movs	r3, #2
 8001af4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001af8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001afc:	fa93 f3a3 	rbit	r3, r3
 8001b00:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001b04:	4b68      	ldr	r3, [pc, #416]	; (8001ca8 <HAL_RCC_OscConfig+0x650>)
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	2202      	movs	r2, #2
 8001b0a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001b0e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001b12:	fa92 f2a2 	rbit	r2, r2
 8001b16:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001b1a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001b1e:	fab2 f282 	clz	r2, r2
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	f042 0220 	orr.w	r2, r2, #32
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	f002 021f 	and.w	r2, r2, #31
 8001b2e:	2101      	movs	r1, #1
 8001b30:	fa01 f202 	lsl.w	r2, r1, r2
 8001b34:	4013      	ands	r3, r2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0af      	beq.n	8001a9a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3a:	4b5b      	ldr	r3, [pc, #364]	; (8001ca8 <HAL_RCC_OscConfig+0x650>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b42:	1d3b      	adds	r3, r7, #4
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	21f8      	movs	r1, #248	; 0xf8
 8001b4a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001b52:	fa91 f1a1 	rbit	r1, r1
 8001b56:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001b5a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001b5e:	fab1 f181 	clz	r1, r1
 8001b62:	b2c9      	uxtb	r1, r1
 8001b64:	408b      	lsls	r3, r1
 8001b66:	4950      	ldr	r1, [pc, #320]	; (8001ca8 <HAL_RCC_OscConfig+0x650>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	600b      	str	r3, [r1, #0]
 8001b6c:	e06a      	b.n	8001c44 <HAL_RCC_OscConfig+0x5ec>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b74:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001b78:	fa93 f3a3 	rbit	r3, r3
 8001b7c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001b80:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b84:	fab3 f383 	clz	r3, r3
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b8e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	461a      	mov	r2, r3
 8001b96:	2300      	movs	r3, #0
 8001b98:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9a:	f7fe ff1d 	bl	80009d8 <HAL_GetTick>
 8001b9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ba2:	e00a      	b.n	8001bba <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ba4:	f7fe ff18 	bl	80009d8 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d902      	bls.n	8001bba <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	f000 bc50 	b.w	800245a <HAL_RCC_OscConfig+0xe02>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001bc4:	fa93 f3a3 	rbit	r3, r3
 8001bc8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001bcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bd0:	fab3 f383 	clz	r3, r3
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	095b      	lsrs	r3, r3, #5
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d102      	bne.n	8001bea <HAL_RCC_OscConfig+0x592>
 8001be4:	4b30      	ldr	r3, [pc, #192]	; (8001ca8 <HAL_RCC_OscConfig+0x650>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	e013      	b.n	8001c12 <HAL_RCC_OscConfig+0x5ba>
 8001bea:	2302      	movs	r3, #2
 8001bec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001bf4:	fa93 f3a3 	rbit	r3, r3
 8001bf8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001c02:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001c06:	fa93 f3a3 	rbit	r3, r3
 8001c0a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001c0e:	4b26      	ldr	r3, [pc, #152]	; (8001ca8 <HAL_RCC_OscConfig+0x650>)
 8001c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c12:	2202      	movs	r2, #2
 8001c14:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001c18:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001c1c:	fa92 f2a2 	rbit	r2, r2
 8001c20:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001c24:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001c28:	fab2 f282 	clz	r2, r2
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	f042 0220 	orr.w	r2, r2, #32
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	f002 021f 	and.w	r2, r2, #31
 8001c38:	2101      	movs	r1, #1
 8001c3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d1af      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c44:	1d3b      	adds	r3, r7, #4
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 80da 	beq.w	8001e08 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c54:	1d3b      	adds	r3, r7, #4
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d069      	beq.n	8001d32 <HAL_RCC_OscConfig+0x6da>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c64:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001c68:	fa93 f3a3 	rbit	r3, r3
 8001c6c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001c70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c74:	fab3 f383 	clz	r3, r3
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <HAL_RCC_OscConfig+0x654>)
 8001c7e:	4413      	add	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	461a      	mov	r2, r3
 8001c84:	2301      	movs	r3, #1
 8001c86:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c88:	f7fe fea6 	bl	80009d8 <HAL_GetTick>
 8001c8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c90:	e00e      	b.n	8001cb0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c92:	f7fe fea1 	bl	80009d8 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d906      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e3d9      	b.n	800245a <HAL_RCC_OscConfig+0xe02>
 8001ca6:	bf00      	nop
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	10908120 	.word	0x10908120
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001cba:	fa93 f3a3 	rbit	r3, r3
 8001cbe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001cc2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	fa93 f2a3 	rbit	r2, r3
 8001cd4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001cde:	2202      	movs	r2, #2
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	fa93 f2a3 	rbit	r2, r3
 8001cec:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001cf0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf2:	4ba5      	ldr	r3, [pc, #660]	; (8001f88 <HAL_RCC_OscConfig+0x930>)
 8001cf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cf6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001cfa:	2102      	movs	r1, #2
 8001cfc:	6019      	str	r1, [r3, #0]
 8001cfe:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	fa93 f1a3 	rbit	r1, r3
 8001d08:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001d0c:	6019      	str	r1, [r3, #0]
  return result;
 8001d0e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	fab3 f383 	clz	r3, r3
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	f003 031f 	and.w	r3, r3, #31
 8001d24:	2101      	movs	r1, #1
 8001d26:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0b0      	beq.n	8001c92 <HAL_RCC_OscConfig+0x63a>
 8001d30:	e06a      	b.n	8001e08 <HAL_RCC_OscConfig+0x7b0>
 8001d32:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001d36:	2201      	movs	r2, #1
 8001d38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	fa93 f2a3 	rbit	r2, r3
 8001d44:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001d48:	601a      	str	r2, [r3, #0]
  return result;
 8001d4a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001d4e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d50:	fab3 f383 	clz	r3, r3
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	461a      	mov	r2, r3
 8001d58:	4b8c      	ldr	r3, [pc, #560]	; (8001f8c <HAL_RCC_OscConfig+0x934>)
 8001d5a:	4413      	add	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	461a      	mov	r2, r3
 8001d60:	2300      	movs	r3, #0
 8001d62:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d64:	f7fe fe38 	bl	80009d8 <HAL_GetTick>
 8001d68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d6c:	e009      	b.n	8001d82 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d6e:	f7fe fe33 	bl	80009d8 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e36b      	b.n	800245a <HAL_RCC_OscConfig+0xe02>
 8001d82:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001d86:	2202      	movs	r2, #2
 8001d88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	fa93 f2a3 	rbit	r2, r3
 8001d94:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001d9e:	2202      	movs	r2, #2
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	fa93 f2a3 	rbit	r2, r3
 8001dac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001db6:	2202      	movs	r2, #2
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	fa93 f2a3 	rbit	r2, r3
 8001dc4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001dc8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dca:	4b6f      	ldr	r3, [pc, #444]	; (8001f88 <HAL_RCC_OscConfig+0x930>)
 8001dcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dce:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001dd2:	2102      	movs	r1, #2
 8001dd4:	6019      	str	r1, [r3, #0]
 8001dd6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	fa93 f1a3 	rbit	r1, r3
 8001de0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001de4:	6019      	str	r1, [r3, #0]
  return result;
 8001de6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	fab3 f383 	clz	r3, r3
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	f003 031f 	and.w	r3, r3, #31
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001e02:	4013      	ands	r3, r2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1b2      	bne.n	8001d6e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e08:	1d3b      	adds	r3, r7, #4
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 8158 	beq.w	80020c8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e1e:	4b5a      	ldr	r3, [pc, #360]	; (8001f88 <HAL_RCC_OscConfig+0x930>)
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d112      	bne.n	8001e50 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e2a:	4b57      	ldr	r3, [pc, #348]	; (8001f88 <HAL_RCC_OscConfig+0x930>)
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	4a56      	ldr	r2, [pc, #344]	; (8001f88 <HAL_RCC_OscConfig+0x930>)
 8001e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e34:	61d3      	str	r3, [r2, #28]
 8001e36:	4b54      	ldr	r3, [pc, #336]	; (8001f88 <HAL_RCC_OscConfig+0x930>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001e3e:	f107 0308 	add.w	r3, r7, #8
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	f107 0308 	add.w	r3, r7, #8
 8001e48:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e50:	4b4f      	ldr	r3, [pc, #316]	; (8001f90 <HAL_RCC_OscConfig+0x938>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d11a      	bne.n	8001e92 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e5c:	4b4c      	ldr	r3, [pc, #304]	; (8001f90 <HAL_RCC_OscConfig+0x938>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a4b      	ldr	r2, [pc, #300]	; (8001f90 <HAL_RCC_OscConfig+0x938>)
 8001e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e66:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e68:	f7fe fdb6 	bl	80009d8 <HAL_GetTick>
 8001e6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e70:	e009      	b.n	8001e86 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e72:	f7fe fdb1 	bl	80009d8 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b64      	cmp	r3, #100	; 0x64
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e2e9      	b.n	800245a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e86:	4b42      	ldr	r3, [pc, #264]	; (8001f90 <HAL_RCC_OscConfig+0x938>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0ef      	beq.n	8001e72 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e92:	1d3b      	adds	r3, r7, #4
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d106      	bne.n	8001eaa <HAL_RCC_OscConfig+0x852>
 8001e9c:	4b3a      	ldr	r3, [pc, #232]	; (8001f88 <HAL_RCC_OscConfig+0x930>)
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	4a39      	ldr	r2, [pc, #228]	; (8001f88 <HAL_RCC_OscConfig+0x930>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	6213      	str	r3, [r2, #32]
 8001ea8:	e02f      	b.n	8001f0a <HAL_RCC_OscConfig+0x8b2>
 8001eaa:	1d3b      	adds	r3, r7, #4
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d10c      	bne.n	8001ece <HAL_RCC_OscConfig+0x876>
 8001eb4:	4b34      	ldr	r3, [pc, #208]	; (8001f88 <HAL_RCC_OscConfig+0x930>)
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	4a33      	ldr	r2, [pc, #204]	; (8001f88 <HAL_RCC_OscConfig+0x930>)
 8001eba:	f023 0301 	bic.w	r3, r3, #1
 8001ebe:	6213      	str	r3, [r2, #32]
 8001ec0:	4b31      	ldr	r3, [pc, #196]	; (8001f88 <HAL_RCC_OscConfig+0x930>)
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	4a30      	ldr	r2, [pc, #192]	; (8001f88 <HAL_RCC_OscConfig+0x930>)
 8001ec6:	f023 0304 	bic.w	r3, r3, #4
 8001eca:	6213      	str	r3, [r2, #32]
 8001ecc:	e01d      	b.n	8001f0a <HAL_RCC_OscConfig+0x8b2>
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	2b05      	cmp	r3, #5
 8001ed6:	d10c      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x89a>
 8001ed8:	4b2b      	ldr	r3, [pc, #172]	; (8001f88 <HAL_RCC_OscConfig+0x930>)
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	4a2a      	ldr	r2, [pc, #168]	; (8001f88 <HAL_RCC_OscConfig+0x930>)
 8001ede:	f043 0304 	orr.w	r3, r3, #4
 8001ee2:	6213      	str	r3, [r2, #32]
 8001ee4:	4b28      	ldr	r3, [pc, #160]	; (8001f88 <HAL_RCC_OscConfig+0x930>)
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	4a27      	ldr	r2, [pc, #156]	; (8001f88 <HAL_RCC_OscConfig+0x930>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6213      	str	r3, [r2, #32]
 8001ef0:	e00b      	b.n	8001f0a <HAL_RCC_OscConfig+0x8b2>
 8001ef2:	4b25      	ldr	r3, [pc, #148]	; (8001f88 <HAL_RCC_OscConfig+0x930>)
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	4a24      	ldr	r2, [pc, #144]	; (8001f88 <HAL_RCC_OscConfig+0x930>)
 8001ef8:	f023 0301 	bic.w	r3, r3, #1
 8001efc:	6213      	str	r3, [r2, #32]
 8001efe:	4b22      	ldr	r3, [pc, #136]	; (8001f88 <HAL_RCC_OscConfig+0x930>)
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	4a21      	ldr	r2, [pc, #132]	; (8001f88 <HAL_RCC_OscConfig+0x930>)
 8001f04:	f023 0304 	bic.w	r3, r3, #4
 8001f08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f0a:	1d3b      	adds	r3, r7, #4
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d06b      	beq.n	8001fec <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f14:	f7fe fd60 	bl	80009d8 <HAL_GetTick>
 8001f18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f1c:	e00b      	b.n	8001f36 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f1e:	f7fe fd5b 	bl	80009d8 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e291      	b.n	800245a <HAL_RCC_OscConfig+0xe02>
 8001f36:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	fa93 f2a3 	rbit	r2, r3
 8001f48:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001f52:	2202      	movs	r2, #2
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	fa93 f2a3 	rbit	r2, r3
 8001f60:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f64:	601a      	str	r2, [r3, #0]
  return result;
 8001f66:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f6a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f6c:	fab3 f383 	clz	r3, r3
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	095b      	lsrs	r3, r3, #5
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	f043 0302 	orr.w	r3, r3, #2
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d109      	bne.n	8001f94 <HAL_RCC_OscConfig+0x93c>
 8001f80:	4b01      	ldr	r3, [pc, #4]	; (8001f88 <HAL_RCC_OscConfig+0x930>)
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	e014      	b.n	8001fb0 <HAL_RCC_OscConfig+0x958>
 8001f86:	bf00      	nop
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	10908120 	.word	0x10908120
 8001f90:	40007000 	.word	0x40007000
 8001f94:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001f98:	2202      	movs	r2, #2
 8001f9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	fa93 f2a3 	rbit	r2, r3
 8001fa6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	4bbb      	ldr	r3, [pc, #748]	; (800229c <HAL_RCC_OscConfig+0xc44>)
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001fb4:	2102      	movs	r1, #2
 8001fb6:	6011      	str	r1, [r2, #0]
 8001fb8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001fbc:	6812      	ldr	r2, [r2, #0]
 8001fbe:	fa92 f1a2 	rbit	r1, r2
 8001fc2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001fc6:	6011      	str	r1, [r2, #0]
  return result;
 8001fc8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001fcc:	6812      	ldr	r2, [r2, #0]
 8001fce:	fab2 f282 	clz	r2, r2
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	f002 021f 	and.w	r2, r2, #31
 8001fde:	2101      	movs	r1, #1
 8001fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d099      	beq.n	8001f1e <HAL_RCC_OscConfig+0x8c6>
 8001fea:	e063      	b.n	80020b4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fec:	f7fe fcf4 	bl	80009d8 <HAL_GetTick>
 8001ff0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff4:	e00b      	b.n	800200e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ff6:	f7fe fcef 	bl	80009d8 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	f241 3288 	movw	r2, #5000	; 0x1388
 8002006:	4293      	cmp	r3, r2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e225      	b.n	800245a <HAL_RCC_OscConfig+0xe02>
 800200e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002012:	2202      	movs	r2, #2
 8002014:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002016:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	fa93 f2a3 	rbit	r2, r3
 8002020:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800202a:	2202      	movs	r2, #2
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	fa93 f2a3 	rbit	r2, r3
 8002038:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800203c:	601a      	str	r2, [r3, #0]
  return result;
 800203e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002042:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002044:	fab3 f383 	clz	r3, r3
 8002048:	b2db      	uxtb	r3, r3
 800204a:	095b      	lsrs	r3, r3, #5
 800204c:	b2db      	uxtb	r3, r3
 800204e:	f043 0302 	orr.w	r3, r3, #2
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d102      	bne.n	800205e <HAL_RCC_OscConfig+0xa06>
 8002058:	4b90      	ldr	r3, [pc, #576]	; (800229c <HAL_RCC_OscConfig+0xc44>)
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	e00d      	b.n	800207a <HAL_RCC_OscConfig+0xa22>
 800205e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002062:	2202      	movs	r2, #2
 8002064:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002066:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	fa93 f2a3 	rbit	r2, r3
 8002070:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	4b89      	ldr	r3, [pc, #548]	; (800229c <HAL_RCC_OscConfig+0xc44>)
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800207e:	2102      	movs	r1, #2
 8002080:	6011      	str	r1, [r2, #0]
 8002082:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002086:	6812      	ldr	r2, [r2, #0]
 8002088:	fa92 f1a2 	rbit	r1, r2
 800208c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002090:	6011      	str	r1, [r2, #0]
  return result;
 8002092:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002096:	6812      	ldr	r2, [r2, #0]
 8002098:	fab2 f282 	clz	r2, r2
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	f002 021f 	and.w	r2, r2, #31
 80020a8:	2101      	movs	r1, #1
 80020aa:	fa01 f202 	lsl.w	r2, r1, r2
 80020ae:	4013      	ands	r3, r2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1a0      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020b4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d105      	bne.n	80020c8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020bc:	4b77      	ldr	r3, [pc, #476]	; (800229c <HAL_RCC_OscConfig+0xc44>)
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	4a76      	ldr	r2, [pc, #472]	; (800229c <HAL_RCC_OscConfig+0xc44>)
 80020c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020c6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020c8:	1d3b      	adds	r3, r7, #4
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 81c2 	beq.w	8002458 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020d4:	4b71      	ldr	r3, [pc, #452]	; (800229c <HAL_RCC_OscConfig+0xc44>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 030c 	and.w	r3, r3, #12
 80020dc:	2b08      	cmp	r3, #8
 80020de:	f000 819c 	beq.w	800241a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020e2:	1d3b      	adds	r3, r7, #4
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	f040 8114 	bne.w	8002316 <HAL_RCC_OscConfig+0xcbe>
 80020ee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80020f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	fa93 f2a3 	rbit	r2, r3
 8002102:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002106:	601a      	str	r2, [r3, #0]
  return result;
 8002108:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800210c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210e:	fab3 f383 	clz	r3, r3
 8002112:	b2db      	uxtb	r3, r3
 8002114:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002118:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	461a      	mov	r2, r3
 8002120:	2300      	movs	r3, #0
 8002122:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002124:	f7fe fc58 	bl	80009d8 <HAL_GetTick>
 8002128:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800212c:	e009      	b.n	8002142 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800212e:	f7fe fc53 	bl	80009d8 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e18b      	b.n	800245a <HAL_RCC_OscConfig+0xe02>
 8002142:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002146:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800214a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	fa93 f2a3 	rbit	r2, r3
 8002156:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800215a:	601a      	str	r2, [r3, #0]
  return result;
 800215c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002160:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002162:	fab3 f383 	clz	r3, r3
 8002166:	b2db      	uxtb	r3, r3
 8002168:	095b      	lsrs	r3, r3, #5
 800216a:	b2db      	uxtb	r3, r3
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b01      	cmp	r3, #1
 8002174:	d102      	bne.n	800217c <HAL_RCC_OscConfig+0xb24>
 8002176:	4b49      	ldr	r3, [pc, #292]	; (800229c <HAL_RCC_OscConfig+0xc44>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	e01b      	b.n	80021b4 <HAL_RCC_OscConfig+0xb5c>
 800217c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002180:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002184:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002186:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	fa93 f2a3 	rbit	r2, r3
 8002190:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800219a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	fa93 f2a3 	rbit	r2, r3
 80021aa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	4b3a      	ldr	r3, [pc, #232]	; (800229c <HAL_RCC_OscConfig+0xc44>)
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80021b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021bc:	6011      	str	r1, [r2, #0]
 80021be:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80021c2:	6812      	ldr	r2, [r2, #0]
 80021c4:	fa92 f1a2 	rbit	r1, r2
 80021c8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80021cc:	6011      	str	r1, [r2, #0]
  return result;
 80021ce:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80021d2:	6812      	ldr	r2, [r2, #0]
 80021d4:	fab2 f282 	clz	r2, r2
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	f042 0220 	orr.w	r2, r2, #32
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	f002 021f 	and.w	r2, r2, #31
 80021e4:	2101      	movs	r1, #1
 80021e6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d19e      	bne.n	800212e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021f0:	4b2a      	ldr	r3, [pc, #168]	; (800229c <HAL_RCC_OscConfig+0xc44>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021f8:	1d3b      	adds	r3, r7, #4
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80021fe:	1d3b      	adds	r3, r7, #4
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	430b      	orrs	r3, r1
 8002206:	4925      	ldr	r1, [pc, #148]	; (800229c <HAL_RCC_OscConfig+0xc44>)
 8002208:	4313      	orrs	r3, r2
 800220a:	604b      	str	r3, [r1, #4]
 800220c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002210:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002214:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002216:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	fa93 f2a3 	rbit	r2, r3
 8002220:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002224:	601a      	str	r2, [r3, #0]
  return result;
 8002226:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800222a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800222c:	fab3 f383 	clz	r3, r3
 8002230:	b2db      	uxtb	r3, r3
 8002232:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002236:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	461a      	mov	r2, r3
 800223e:	2301      	movs	r3, #1
 8002240:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002242:	f7fe fbc9 	bl	80009d8 <HAL_GetTick>
 8002246:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800224a:	e009      	b.n	8002260 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800224c:	f7fe fbc4 	bl	80009d8 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e0fc      	b.n	800245a <HAL_RCC_OscConfig+0xe02>
 8002260:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002264:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002268:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	fa93 f2a3 	rbit	r2, r3
 8002274:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002278:	601a      	str	r2, [r3, #0]
  return result;
 800227a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800227e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002280:	fab3 f383 	clz	r3, r3
 8002284:	b2db      	uxtb	r3, r3
 8002286:	095b      	lsrs	r3, r3, #5
 8002288:	b2db      	uxtb	r3, r3
 800228a:	f043 0301 	orr.w	r3, r3, #1
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b01      	cmp	r3, #1
 8002292:	d105      	bne.n	80022a0 <HAL_RCC_OscConfig+0xc48>
 8002294:	4b01      	ldr	r3, [pc, #4]	; (800229c <HAL_RCC_OscConfig+0xc44>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	e01e      	b.n	80022d8 <HAL_RCC_OscConfig+0xc80>
 800229a:	bf00      	nop
 800229c:	40021000 	.word	0x40021000
 80022a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80022a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	fa93 f2a3 	rbit	r2, r3
 80022b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	fa93 f2a3 	rbit	r2, r3
 80022ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	4b63      	ldr	r3, [pc, #396]	; (8002464 <HAL_RCC_OscConfig+0xe0c>)
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022e0:	6011      	str	r1, [r2, #0]
 80022e2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022e6:	6812      	ldr	r2, [r2, #0]
 80022e8:	fa92 f1a2 	rbit	r1, r2
 80022ec:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80022f0:	6011      	str	r1, [r2, #0]
  return result;
 80022f2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80022f6:	6812      	ldr	r2, [r2, #0]
 80022f8:	fab2 f282 	clz	r2, r2
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	f042 0220 	orr.w	r2, r2, #32
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	f002 021f 	and.w	r2, r2, #31
 8002308:	2101      	movs	r1, #1
 800230a:	fa01 f202 	lsl.w	r2, r1, r2
 800230e:	4013      	ands	r3, r2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d09b      	beq.n	800224c <HAL_RCC_OscConfig+0xbf4>
 8002314:	e0a0      	b.n	8002458 <HAL_RCC_OscConfig+0xe00>
 8002316:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800231a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800231e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002320:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	fa93 f2a3 	rbit	r2, r3
 800232a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800232e:	601a      	str	r2, [r3, #0]
  return result;
 8002330:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002334:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002336:	fab3 f383 	clz	r3, r3
 800233a:	b2db      	uxtb	r3, r3
 800233c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002340:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	461a      	mov	r2, r3
 8002348:	2300      	movs	r3, #0
 800234a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234c:	f7fe fb44 	bl	80009d8 <HAL_GetTick>
 8002350:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002354:	e009      	b.n	800236a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002356:	f7fe fb3f 	bl	80009d8 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e077      	b.n	800245a <HAL_RCC_OscConfig+0xe02>
 800236a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800236e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002372:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002374:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	fa93 f2a3 	rbit	r2, r3
 800237e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002382:	601a      	str	r2, [r3, #0]
  return result;
 8002384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002388:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800238a:	fab3 f383 	clz	r3, r3
 800238e:	b2db      	uxtb	r3, r3
 8002390:	095b      	lsrs	r3, r3, #5
 8002392:	b2db      	uxtb	r3, r3
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b01      	cmp	r3, #1
 800239c:	d102      	bne.n	80023a4 <HAL_RCC_OscConfig+0xd4c>
 800239e:	4b31      	ldr	r3, [pc, #196]	; (8002464 <HAL_RCC_OscConfig+0xe0c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	e01b      	b.n	80023dc <HAL_RCC_OscConfig+0xd84>
 80023a4:	f107 0320 	add.w	r3, r7, #32
 80023a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ae:	f107 0320 	add.w	r3, r7, #32
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	fa93 f2a3 	rbit	r2, r3
 80023b8:	f107 031c 	add.w	r3, r7, #28
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	f107 0318 	add.w	r3, r7, #24
 80023c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	f107 0318 	add.w	r3, r7, #24
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	fa93 f2a3 	rbit	r2, r3
 80023d2:	f107 0314 	add.w	r3, r7, #20
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	4b22      	ldr	r3, [pc, #136]	; (8002464 <HAL_RCC_OscConfig+0xe0c>)
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	f107 0210 	add.w	r2, r7, #16
 80023e0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023e4:	6011      	str	r1, [r2, #0]
 80023e6:	f107 0210 	add.w	r2, r7, #16
 80023ea:	6812      	ldr	r2, [r2, #0]
 80023ec:	fa92 f1a2 	rbit	r1, r2
 80023f0:	f107 020c 	add.w	r2, r7, #12
 80023f4:	6011      	str	r1, [r2, #0]
  return result;
 80023f6:	f107 020c 	add.w	r2, r7, #12
 80023fa:	6812      	ldr	r2, [r2, #0]
 80023fc:	fab2 f282 	clz	r2, r2
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	f042 0220 	orr.w	r2, r2, #32
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	f002 021f 	and.w	r2, r2, #31
 800240c:	2101      	movs	r1, #1
 800240e:	fa01 f202 	lsl.w	r2, r1, r2
 8002412:	4013      	ands	r3, r2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d19e      	bne.n	8002356 <HAL_RCC_OscConfig+0xcfe>
 8002418:	e01e      	b.n	8002458 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800241a:	1d3b      	adds	r3, r7, #4
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e018      	b.n	800245a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002428:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <HAL_RCC_OscConfig+0xe0c>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002430:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002434:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002438:	1d3b      	adds	r3, r7, #4
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	429a      	cmp	r2, r3
 8002440:	d108      	bne.n	8002454 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002442:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002446:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800244a:	1d3b      	adds	r3, r7, #4
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002450:	429a      	cmp	r2, r3
 8002452:	d001      	beq.n	8002458 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e000      	b.n	800245a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40021000 	.word	0x40021000

08002468 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b09e      	sub	sp, #120	; 0x78
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002472:	2300      	movs	r3, #0
 8002474:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e162      	b.n	8002746 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002480:	4b90      	ldr	r3, [pc, #576]	; (80026c4 <HAL_RCC_ClockConfig+0x25c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d910      	bls.n	80024b0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248e:	4b8d      	ldr	r3, [pc, #564]	; (80026c4 <HAL_RCC_ClockConfig+0x25c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f023 0207 	bic.w	r2, r3, #7
 8002496:	498b      	ldr	r1, [pc, #556]	; (80026c4 <HAL_RCC_ClockConfig+0x25c>)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800249e:	4b89      	ldr	r3, [pc, #548]	; (80026c4 <HAL_RCC_ClockConfig+0x25c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d001      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e14a      	b.n	8002746 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d008      	beq.n	80024ce <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024bc:	4b82      	ldr	r3, [pc, #520]	; (80026c8 <HAL_RCC_ClockConfig+0x260>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	497f      	ldr	r1, [pc, #508]	; (80026c8 <HAL_RCC_ClockConfig+0x260>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 80dc 	beq.w	8002694 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d13c      	bne.n	800255e <HAL_RCC_ClockConfig+0xf6>
 80024e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024e8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024ec:	fa93 f3a3 	rbit	r3, r3
 80024f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80024f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f4:	fab3 f383 	clz	r3, r3
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	095b      	lsrs	r3, r3, #5
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b01      	cmp	r3, #1
 8002506:	d102      	bne.n	800250e <HAL_RCC_ClockConfig+0xa6>
 8002508:	4b6f      	ldr	r3, [pc, #444]	; (80026c8 <HAL_RCC_ClockConfig+0x260>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	e00f      	b.n	800252e <HAL_RCC_ClockConfig+0xc6>
 800250e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002512:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002514:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002516:	fa93 f3a3 	rbit	r3, r3
 800251a:	667b      	str	r3, [r7, #100]	; 0x64
 800251c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002520:	663b      	str	r3, [r7, #96]	; 0x60
 8002522:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002524:	fa93 f3a3 	rbit	r3, r3
 8002528:	65fb      	str	r3, [r7, #92]	; 0x5c
 800252a:	4b67      	ldr	r3, [pc, #412]	; (80026c8 <HAL_RCC_ClockConfig+0x260>)
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002532:	65ba      	str	r2, [r7, #88]	; 0x58
 8002534:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002536:	fa92 f2a2 	rbit	r2, r2
 800253a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800253c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800253e:	fab2 f282 	clz	r2, r2
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	f042 0220 	orr.w	r2, r2, #32
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	f002 021f 	and.w	r2, r2, #31
 800254e:	2101      	movs	r1, #1
 8002550:	fa01 f202 	lsl.w	r2, r1, r2
 8002554:	4013      	ands	r3, r2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d17b      	bne.n	8002652 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e0f3      	b.n	8002746 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d13c      	bne.n	80025e0 <HAL_RCC_ClockConfig+0x178>
 8002566:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800256a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800256e:	fa93 f3a3 	rbit	r3, r3
 8002572:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002576:	fab3 f383 	clz	r3, r3
 800257a:	b2db      	uxtb	r3, r3
 800257c:	095b      	lsrs	r3, r3, #5
 800257e:	b2db      	uxtb	r3, r3
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b01      	cmp	r3, #1
 8002588:	d102      	bne.n	8002590 <HAL_RCC_ClockConfig+0x128>
 800258a:	4b4f      	ldr	r3, [pc, #316]	; (80026c8 <HAL_RCC_ClockConfig+0x260>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	e00f      	b.n	80025b0 <HAL_RCC_ClockConfig+0x148>
 8002590:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002594:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002598:	fa93 f3a3 	rbit	r3, r3
 800259c:	647b      	str	r3, [r7, #68]	; 0x44
 800259e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025a2:	643b      	str	r3, [r7, #64]	; 0x40
 80025a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025a6:	fa93 f3a3 	rbit	r3, r3
 80025aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025ac:	4b46      	ldr	r3, [pc, #280]	; (80026c8 <HAL_RCC_ClockConfig+0x260>)
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025b4:	63ba      	str	r2, [r7, #56]	; 0x38
 80025b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025b8:	fa92 f2a2 	rbit	r2, r2
 80025bc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80025be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025c0:	fab2 f282 	clz	r2, r2
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	f042 0220 	orr.w	r2, r2, #32
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	f002 021f 	and.w	r2, r2, #31
 80025d0:	2101      	movs	r1, #1
 80025d2:	fa01 f202 	lsl.w	r2, r1, r2
 80025d6:	4013      	ands	r3, r2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d13a      	bne.n	8002652 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e0b2      	b.n	8002746 <HAL_RCC_ClockConfig+0x2de>
 80025e0:	2302      	movs	r3, #2
 80025e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e6:	fa93 f3a3 	rbit	r3, r3
 80025ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80025ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ee:	fab3 f383 	clz	r3, r3
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	095b      	lsrs	r3, r3, #5
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d102      	bne.n	8002608 <HAL_RCC_ClockConfig+0x1a0>
 8002602:	4b31      	ldr	r3, [pc, #196]	; (80026c8 <HAL_RCC_ClockConfig+0x260>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	e00d      	b.n	8002624 <HAL_RCC_ClockConfig+0x1bc>
 8002608:	2302      	movs	r3, #2
 800260a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260e:	fa93 f3a3 	rbit	r3, r3
 8002612:	627b      	str	r3, [r7, #36]	; 0x24
 8002614:	2302      	movs	r3, #2
 8002616:	623b      	str	r3, [r7, #32]
 8002618:	6a3b      	ldr	r3, [r7, #32]
 800261a:	fa93 f3a3 	rbit	r3, r3
 800261e:	61fb      	str	r3, [r7, #28]
 8002620:	4b29      	ldr	r3, [pc, #164]	; (80026c8 <HAL_RCC_ClockConfig+0x260>)
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	2202      	movs	r2, #2
 8002626:	61ba      	str	r2, [r7, #24]
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	fa92 f2a2 	rbit	r2, r2
 800262e:	617a      	str	r2, [r7, #20]
  return result;
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	fab2 f282 	clz	r2, r2
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	f042 0220 	orr.w	r2, r2, #32
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	f002 021f 	and.w	r2, r2, #31
 8002642:	2101      	movs	r1, #1
 8002644:	fa01 f202 	lsl.w	r2, r1, r2
 8002648:	4013      	ands	r3, r2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e079      	b.n	8002746 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002652:	4b1d      	ldr	r3, [pc, #116]	; (80026c8 <HAL_RCC_ClockConfig+0x260>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f023 0203 	bic.w	r2, r3, #3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	491a      	ldr	r1, [pc, #104]	; (80026c8 <HAL_RCC_ClockConfig+0x260>)
 8002660:	4313      	orrs	r3, r2
 8002662:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002664:	f7fe f9b8 	bl	80009d8 <HAL_GetTick>
 8002668:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266a:	e00a      	b.n	8002682 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800266c:	f7fe f9b4 	bl	80009d8 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	f241 3288 	movw	r2, #5000	; 0x1388
 800267a:	4293      	cmp	r3, r2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e061      	b.n	8002746 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002682:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <HAL_RCC_ClockConfig+0x260>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f003 020c 	and.w	r2, r3, #12
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	429a      	cmp	r2, r3
 8002692:	d1eb      	bne.n	800266c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002694:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <HAL_RCC_ClockConfig+0x25c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d214      	bcs.n	80026cc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a2:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <HAL_RCC_ClockConfig+0x25c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f023 0207 	bic.w	r2, r3, #7
 80026aa:	4906      	ldr	r1, [pc, #24]	; (80026c4 <HAL_RCC_ClockConfig+0x25c>)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b2:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <HAL_RCC_ClockConfig+0x25c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d005      	beq.n	80026cc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e040      	b.n	8002746 <HAL_RCC_ClockConfig+0x2de>
 80026c4:	40022000 	.word	0x40022000
 80026c8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d008      	beq.n	80026ea <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026d8:	4b1d      	ldr	r3, [pc, #116]	; (8002750 <HAL_RCC_ClockConfig+0x2e8>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	491a      	ldr	r1, [pc, #104]	; (8002750 <HAL_RCC_ClockConfig+0x2e8>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0308 	and.w	r3, r3, #8
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d009      	beq.n	800270a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026f6:	4b16      	ldr	r3, [pc, #88]	; (8002750 <HAL_RCC_ClockConfig+0x2e8>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	4912      	ldr	r1, [pc, #72]	; (8002750 <HAL_RCC_ClockConfig+0x2e8>)
 8002706:	4313      	orrs	r3, r2
 8002708:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800270a:	f000 f829 	bl	8002760 <HAL_RCC_GetSysClockFreq>
 800270e:	4601      	mov	r1, r0
 8002710:	4b0f      	ldr	r3, [pc, #60]	; (8002750 <HAL_RCC_ClockConfig+0x2e8>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002718:	22f0      	movs	r2, #240	; 0xf0
 800271a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	fa92 f2a2 	rbit	r2, r2
 8002722:	60fa      	str	r2, [r7, #12]
  return result;
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	fab2 f282 	clz	r2, r2
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	40d3      	lsrs	r3, r2
 800272e:	4a09      	ldr	r2, [pc, #36]	; (8002754 <HAL_RCC_ClockConfig+0x2ec>)
 8002730:	5cd3      	ldrb	r3, [r2, r3]
 8002732:	fa21 f303 	lsr.w	r3, r1, r3
 8002736:	4a08      	ldr	r2, [pc, #32]	; (8002758 <HAL_RCC_ClockConfig+0x2f0>)
 8002738:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800273a:	4b08      	ldr	r3, [pc, #32]	; (800275c <HAL_RCC_ClockConfig+0x2f4>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f7fe f906 	bl	8000950 <HAL_InitTick>
  
  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3778      	adds	r7, #120	; 0x78
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40021000 	.word	0x40021000
 8002754:	08003400 	.word	0x08003400
 8002758:	20000004 	.word	0x20000004
 800275c:	20000008 	.word	0x20000008

08002760 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002760:	b480      	push	{r7}
 8002762:	b08b      	sub	sp, #44	; 0x2c
 8002764:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002766:	2300      	movs	r3, #0
 8002768:	61fb      	str	r3, [r7, #28]
 800276a:	2300      	movs	r3, #0
 800276c:	61bb      	str	r3, [r7, #24]
 800276e:	2300      	movs	r3, #0
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002776:	2300      	movs	r3, #0
 8002778:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800277a:	4b29      	ldr	r3, [pc, #164]	; (8002820 <HAL_RCC_GetSysClockFreq+0xc0>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	2b04      	cmp	r3, #4
 8002788:	d002      	beq.n	8002790 <HAL_RCC_GetSysClockFreq+0x30>
 800278a:	2b08      	cmp	r3, #8
 800278c:	d003      	beq.n	8002796 <HAL_RCC_GetSysClockFreq+0x36>
 800278e:	e03c      	b.n	800280a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002790:	4b24      	ldr	r3, [pc, #144]	; (8002824 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002792:	623b      	str	r3, [r7, #32]
      break;
 8002794:	e03c      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800279c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80027a0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a2:	68ba      	ldr	r2, [r7, #8]
 80027a4:	fa92 f2a2 	rbit	r2, r2
 80027a8:	607a      	str	r2, [r7, #4]
  return result;
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	fab2 f282 	clz	r2, r2
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	40d3      	lsrs	r3, r2
 80027b4:	4a1c      	ldr	r2, [pc, #112]	; (8002828 <HAL_RCC_GetSysClockFreq+0xc8>)
 80027b6:	5cd3      	ldrb	r3, [r2, r3]
 80027b8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80027ba:	4b19      	ldr	r3, [pc, #100]	; (8002820 <HAL_RCC_GetSysClockFreq+0xc0>)
 80027bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	220f      	movs	r2, #15
 80027c4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	fa92 f2a2 	rbit	r2, r2
 80027cc:	60fa      	str	r2, [r7, #12]
  return result;
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	fab2 f282 	clz	r2, r2
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	40d3      	lsrs	r3, r2
 80027d8:	4a14      	ldr	r2, [pc, #80]	; (800282c <HAL_RCC_GetSysClockFreq+0xcc>)
 80027da:	5cd3      	ldrb	r3, [r2, r3]
 80027dc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d008      	beq.n	80027fa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027e8:	4a0e      	ldr	r2, [pc, #56]	; (8002824 <HAL_RCC_GetSysClockFreq+0xc4>)
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	fb02 f303 	mul.w	r3, r2, r3
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
 80027f8:	e004      	b.n	8002804 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	4a0c      	ldr	r2, [pc, #48]	; (8002830 <HAL_RCC_GetSysClockFreq+0xd0>)
 80027fe:	fb02 f303 	mul.w	r3, r2, r3
 8002802:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	623b      	str	r3, [r7, #32]
      break;
 8002808:	e002      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800280a:	4b06      	ldr	r3, [pc, #24]	; (8002824 <HAL_RCC_GetSysClockFreq+0xc4>)
 800280c:	623b      	str	r3, [r7, #32]
      break;
 800280e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002810:	6a3b      	ldr	r3, [r7, #32]
}
 8002812:	4618      	mov	r0, r3
 8002814:	372c      	adds	r7, #44	; 0x2c
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40021000 	.word	0x40021000
 8002824:	007a1200 	.word	0x007a1200
 8002828:	08003418 	.word	0x08003418
 800282c:	08003428 	.word	0x08003428
 8002830:	003d0900 	.word	0x003d0900

08002834 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002838:	4b03      	ldr	r3, [pc, #12]	; (8002848 <HAL_RCC_GetHCLKFreq+0x14>)
 800283a:	681b      	ldr	r3, [r3, #0]
}
 800283c:	4618      	mov	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	20000004 	.word	0x20000004

0800284c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002852:	f7ff ffef 	bl	8002834 <HAL_RCC_GetHCLKFreq>
 8002856:	4601      	mov	r1, r0
 8002858:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002860:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002864:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	fa92 f2a2 	rbit	r2, r2
 800286c:	603a      	str	r2, [r7, #0]
  return result;
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	fab2 f282 	clz	r2, r2
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	40d3      	lsrs	r3, r2
 8002878:	4a04      	ldr	r2, [pc, #16]	; (800288c <HAL_RCC_GetPCLK1Freq+0x40>)
 800287a:	5cd3      	ldrb	r3, [r2, r3]
 800287c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40021000 	.word	0x40021000
 800288c:	08003410 	.word	0x08003410

08002890 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002896:	f7ff ffcd 	bl	8002834 <HAL_RCC_GetHCLKFreq>
 800289a:	4601      	mov	r1, r0
 800289c:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80028a4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80028a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	fa92 f2a2 	rbit	r2, r2
 80028b0:	603a      	str	r2, [r7, #0]
  return result;
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	fab2 f282 	clz	r2, r2
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	40d3      	lsrs	r3, r2
 80028bc:	4a04      	ldr	r2, [pc, #16]	; (80028d0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80028be:	5cd3      	ldrb	r3, [r2, r3]
 80028c0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40021000 	.word	0x40021000
 80028d0:	08003410 	.word	0x08003410

080028d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b092      	sub	sp, #72	; 0x48
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028dc:	2300      	movs	r3, #0
 80028de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80028e4:	2300      	movs	r3, #0
 80028e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 80cd 	beq.w	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f8:	4b86      	ldr	r3, [pc, #536]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10e      	bne.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002904:	4b83      	ldr	r3, [pc, #524]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	4a82      	ldr	r2, [pc, #520]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800290a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800290e:	61d3      	str	r3, [r2, #28]
 8002910:	4b80      	ldr	r3, [pc, #512]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002912:	69db      	ldr	r3, [r3, #28]
 8002914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800291c:	2301      	movs	r3, #1
 800291e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002922:	4b7d      	ldr	r3, [pc, #500]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292a:	2b00      	cmp	r3, #0
 800292c:	d118      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800292e:	4b7a      	ldr	r3, [pc, #488]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a79      	ldr	r2, [pc, #484]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002938:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800293a:	f7fe f84d 	bl	80009d8 <HAL_GetTick>
 800293e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002940:	e008      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002942:	f7fe f849 	bl	80009d8 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b64      	cmp	r3, #100	; 0x64
 800294e:	d901      	bls.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e0db      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002954:	4b70      	ldr	r3, [pc, #448]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0f0      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002960:	4b6c      	ldr	r3, [pc, #432]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002968:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800296a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800296c:	2b00      	cmp	r3, #0
 800296e:	d07d      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002978:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800297a:	429a      	cmp	r2, r3
 800297c:	d076      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800297e:	4b65      	ldr	r3, [pc, #404]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002986:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002988:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800298c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002990:	fa93 f3a3 	rbit	r3, r3
 8002994:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002998:	fab3 f383 	clz	r3, r3
 800299c:	b2db      	uxtb	r3, r3
 800299e:	461a      	mov	r2, r3
 80029a0:	4b5e      	ldr	r3, [pc, #376]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80029a2:	4413      	add	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	461a      	mov	r2, r3
 80029a8:	2301      	movs	r3, #1
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b4:	fa93 f3a3 	rbit	r3, r3
 80029b8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80029ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029bc:	fab3 f383 	clz	r3, r3
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	461a      	mov	r2, r3
 80029c4:	4b55      	ldr	r3, [pc, #340]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80029c6:	4413      	add	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	461a      	mov	r2, r3
 80029cc:	2300      	movs	r3, #0
 80029ce:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029d0:	4a50      	ldr	r2, [pc, #320]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029d4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d045      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e0:	f7fd fffa 	bl	80009d8 <HAL_GetTick>
 80029e4:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e6:	e00a      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e8:	f7fd fff6 	bl	80009d8 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d901      	bls.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e086      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x238>
 80029fe:	2302      	movs	r3, #2
 8002a00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a04:	fa93 f3a3 	rbit	r3, r3
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	623b      	str	r3, [r7, #32]
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	fa93 f3a3 	rbit	r3, r3
 8002a14:	61fb      	str	r3, [r7, #28]
  return result;
 8002a16:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a18:	fab3 f383 	clz	r3, r3
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	095b      	lsrs	r3, r3, #5
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	f043 0302 	orr.w	r3, r3, #2
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d102      	bne.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002a2c:	4b39      	ldr	r3, [pc, #228]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	e007      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002a32:	2302      	movs	r3, #2
 8002a34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	fa93 f3a3 	rbit	r3, r3
 8002a3c:	617b      	str	r3, [r7, #20]
 8002a3e:	4b35      	ldr	r3, [pc, #212]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	2202      	movs	r2, #2
 8002a44:	613a      	str	r2, [r7, #16]
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	fa92 f2a2 	rbit	r2, r2
 8002a4c:	60fa      	str	r2, [r7, #12]
  return result;
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	fab2 f282 	clz	r2, r2
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	f002 021f 	and.w	r2, r2, #31
 8002a60:	2101      	movs	r1, #1
 8002a62:	fa01 f202 	lsl.w	r2, r1, r2
 8002a66:	4013      	ands	r3, r2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0bd      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002a6c:	4b29      	ldr	r3, [pc, #164]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	4926      	ldr	r1, [pc, #152]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a7e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d105      	bne.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a86:	4b23      	ldr	r3, [pc, #140]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	4a22      	ldr	r2, [pc, #136]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a90:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d008      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a9e:	4b1d      	ldr	r3, [pc, #116]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	f023 0203 	bic.w	r2, r3, #3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	491a      	ldr	r1, [pc, #104]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0320 	and.w	r3, r3, #32
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d008      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002abc:	4b15      	ldr	r3, [pc, #84]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac0:	f023 0210 	bic.w	r2, r3, #16
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	4912      	ldr	r1, [pc, #72]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d008      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ada:	4b0e      	ldr	r3, [pc, #56]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ade:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	490b      	ldr	r1, [pc, #44]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002af8:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	4903      	ldr	r1, [pc, #12]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3748      	adds	r7, #72	; 0x48
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40021000 	.word	0x40021000
 8002b18:	40007000 	.word	0x40007000
 8002b1c:	10908100 	.word	0x10908100

08002b20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e040      	b.n	8002bb4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d106      	bne.n	8002b48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7fd fe44 	bl	80007d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2224      	movs	r2, #36	; 0x24
 8002b4c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0201 	bic.w	r2, r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f82c 	bl	8002bbc <UART_SetConfig>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d101      	bne.n	8002b6e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e022      	b.n	8002bb4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d002      	beq.n	8002b7c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f956 	bl	8002e28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0201 	orr.w	r2, r2, #1
 8002baa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f9dd 	bl	8002f6c <UART_CheckIdleState>
 8002bb2:	4603      	mov	r3, r0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b088      	sub	sp, #32
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	69db      	ldr	r3, [r3, #28]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	4b8a      	ldr	r3, [pc, #552]	; (8002e10 <UART_SetConfig+0x254>)
 8002be8:	4013      	ands	r3, r2
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6812      	ldr	r2, [r2, #0]
 8002bee:	6979      	ldr	r1, [r7, #20]
 8002bf0:	430b      	orrs	r3, r1
 8002bf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a78      	ldr	r2, [pc, #480]	; (8002e14 <UART_SetConfig+0x258>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d120      	bne.n	8002c7a <UART_SetConfig+0xbe>
 8002c38:	4b77      	ldr	r3, [pc, #476]	; (8002e18 <UART_SetConfig+0x25c>)
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	2b03      	cmp	r3, #3
 8002c42:	d817      	bhi.n	8002c74 <UART_SetConfig+0xb8>
 8002c44:	a201      	add	r2, pc, #4	; (adr r2, 8002c4c <UART_SetConfig+0x90>)
 8002c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c4a:	bf00      	nop
 8002c4c:	08002c5d 	.word	0x08002c5d
 8002c50:	08002c69 	.word	0x08002c69
 8002c54:	08002c6f 	.word	0x08002c6f
 8002c58:	08002c63 	.word	0x08002c63
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	77fb      	strb	r3, [r7, #31]
 8002c60:	e01d      	b.n	8002c9e <UART_SetConfig+0xe2>
 8002c62:	2302      	movs	r3, #2
 8002c64:	77fb      	strb	r3, [r7, #31]
 8002c66:	e01a      	b.n	8002c9e <UART_SetConfig+0xe2>
 8002c68:	2304      	movs	r3, #4
 8002c6a:	77fb      	strb	r3, [r7, #31]
 8002c6c:	e017      	b.n	8002c9e <UART_SetConfig+0xe2>
 8002c6e:	2308      	movs	r3, #8
 8002c70:	77fb      	strb	r3, [r7, #31]
 8002c72:	e014      	b.n	8002c9e <UART_SetConfig+0xe2>
 8002c74:	2310      	movs	r3, #16
 8002c76:	77fb      	strb	r3, [r7, #31]
 8002c78:	e011      	b.n	8002c9e <UART_SetConfig+0xe2>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a67      	ldr	r2, [pc, #412]	; (8002e1c <UART_SetConfig+0x260>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d102      	bne.n	8002c8a <UART_SetConfig+0xce>
 8002c84:	2300      	movs	r3, #0
 8002c86:	77fb      	strb	r3, [r7, #31]
 8002c88:	e009      	b.n	8002c9e <UART_SetConfig+0xe2>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a64      	ldr	r2, [pc, #400]	; (8002e20 <UART_SetConfig+0x264>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d102      	bne.n	8002c9a <UART_SetConfig+0xde>
 8002c94:	2300      	movs	r3, #0
 8002c96:	77fb      	strb	r3, [r7, #31]
 8002c98:	e001      	b.n	8002c9e <UART_SetConfig+0xe2>
 8002c9a:	2310      	movs	r3, #16
 8002c9c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ca6:	d15b      	bne.n	8002d60 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8002ca8:	7ffb      	ldrb	r3, [r7, #31]
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d827      	bhi.n	8002cfe <UART_SetConfig+0x142>
 8002cae:	a201      	add	r2, pc, #4	; (adr r2, 8002cb4 <UART_SetConfig+0xf8>)
 8002cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb4:	08002cd9 	.word	0x08002cd9
 8002cb8:	08002ce1 	.word	0x08002ce1
 8002cbc:	08002ce9 	.word	0x08002ce9
 8002cc0:	08002cff 	.word	0x08002cff
 8002cc4:	08002cef 	.word	0x08002cef
 8002cc8:	08002cff 	.word	0x08002cff
 8002ccc:	08002cff 	.word	0x08002cff
 8002cd0:	08002cff 	.word	0x08002cff
 8002cd4:	08002cf7 	.word	0x08002cf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cd8:	f7ff fdb8 	bl	800284c <HAL_RCC_GetPCLK1Freq>
 8002cdc:	61b8      	str	r0, [r7, #24]
        break;
 8002cde:	e013      	b.n	8002d08 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ce0:	f7ff fdd6 	bl	8002890 <HAL_RCC_GetPCLK2Freq>
 8002ce4:	61b8      	str	r0, [r7, #24]
        break;
 8002ce6:	e00f      	b.n	8002d08 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ce8:	4b4e      	ldr	r3, [pc, #312]	; (8002e24 <UART_SetConfig+0x268>)
 8002cea:	61bb      	str	r3, [r7, #24]
        break;
 8002cec:	e00c      	b.n	8002d08 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cee:	f7ff fd37 	bl	8002760 <HAL_RCC_GetSysClockFreq>
 8002cf2:	61b8      	str	r0, [r7, #24]
        break;
 8002cf4:	e008      	b.n	8002d08 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cfa:	61bb      	str	r3, [r7, #24]
        break;
 8002cfc:	e004      	b.n	8002d08 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	77bb      	strb	r3, [r7, #30]
        break;
 8002d06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d074      	beq.n	8002df8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	005a      	lsls	r2, r3, #1
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	085b      	lsrs	r3, r3, #1
 8002d18:	441a      	add	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	2b0f      	cmp	r3, #15
 8002d2a:	d916      	bls.n	8002d5a <UART_SetConfig+0x19e>
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d32:	d212      	bcs.n	8002d5a <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	f023 030f 	bic.w	r3, r3, #15
 8002d3c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	085b      	lsrs	r3, r3, #1
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	89fb      	ldrh	r3, [r7, #14]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	89fa      	ldrh	r2, [r7, #14]
 8002d56:	60da      	str	r2, [r3, #12]
 8002d58:	e04e      	b.n	8002df8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	77bb      	strb	r3, [r7, #30]
 8002d5e:	e04b      	b.n	8002df8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d60:	7ffb      	ldrb	r3, [r7, #31]
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d827      	bhi.n	8002db6 <UART_SetConfig+0x1fa>
 8002d66:	a201      	add	r2, pc, #4	; (adr r2, 8002d6c <UART_SetConfig+0x1b0>)
 8002d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6c:	08002d91 	.word	0x08002d91
 8002d70:	08002d99 	.word	0x08002d99
 8002d74:	08002da1 	.word	0x08002da1
 8002d78:	08002db7 	.word	0x08002db7
 8002d7c:	08002da7 	.word	0x08002da7
 8002d80:	08002db7 	.word	0x08002db7
 8002d84:	08002db7 	.word	0x08002db7
 8002d88:	08002db7 	.word	0x08002db7
 8002d8c:	08002daf 	.word	0x08002daf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d90:	f7ff fd5c 	bl	800284c <HAL_RCC_GetPCLK1Freq>
 8002d94:	61b8      	str	r0, [r7, #24]
        break;
 8002d96:	e013      	b.n	8002dc0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d98:	f7ff fd7a 	bl	8002890 <HAL_RCC_GetPCLK2Freq>
 8002d9c:	61b8      	str	r0, [r7, #24]
        break;
 8002d9e:	e00f      	b.n	8002dc0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002da0:	4b20      	ldr	r3, [pc, #128]	; (8002e24 <UART_SetConfig+0x268>)
 8002da2:	61bb      	str	r3, [r7, #24]
        break;
 8002da4:	e00c      	b.n	8002dc0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002da6:	f7ff fcdb 	bl	8002760 <HAL_RCC_GetSysClockFreq>
 8002daa:	61b8      	str	r0, [r7, #24]
        break;
 8002dac:	e008      	b.n	8002dc0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002db2:	61bb      	str	r3, [r7, #24]
        break;
 8002db4:	e004      	b.n	8002dc0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	77bb      	strb	r3, [r7, #30]
        break;
 8002dbe:	bf00      	nop
    }

    if (pclk != 0U)
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d018      	beq.n	8002df8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	085a      	lsrs	r2, r3, #1
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	441a      	add	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	2b0f      	cmp	r3, #15
 8002de0:	d908      	bls.n	8002df4 <UART_SetConfig+0x238>
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de8:	d204      	bcs.n	8002df4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	60da      	str	r2, [r3, #12]
 8002df2:	e001      	b.n	8002df8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002e04:	7fbb      	ldrb	r3, [r7, #30]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3720      	adds	r7, #32
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	efff69f3 	.word	0xefff69f3
 8002e14:	40013800 	.word	0x40013800
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	40004400 	.word	0x40004400
 8002e20:	40004800 	.word	0x40004800
 8002e24:	007a1200 	.word	0x007a1200

08002e28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00a      	beq.n	8002e52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00a      	beq.n	8002e74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00a      	beq.n	8002e96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	f003 0308 	and.w	r3, r3, #8
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00a      	beq.n	8002eb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00a      	beq.n	8002eda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	f003 0320 	and.w	r3, r3, #32
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00a      	beq.n	8002efc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d01a      	beq.n	8002f3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f26:	d10a      	bne.n	8002f3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00a      	beq.n	8002f60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	605a      	str	r2, [r3, #4]
  }
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af02      	add	r7, sp, #8
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f7c:	f7fd fd2c 	bl	80009d8 <HAL_GetTick>
 8002f80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0308 	and.w	r3, r3, #8
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d10e      	bne.n	8002fae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f82d 	bl	8002ffe <UART_WaitOnFlagUntilTimeout>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e023      	b.n	8002ff6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d10e      	bne.n	8002fda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f817 	bl	8002ffe <UART_WaitOnFlagUntilTimeout>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e00d      	b.n	8002ff6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b09c      	sub	sp, #112	; 0x70
 8003002:	af00      	add	r7, sp, #0
 8003004:	60f8      	str	r0, [r7, #12]
 8003006:	60b9      	str	r1, [r7, #8]
 8003008:	603b      	str	r3, [r7, #0]
 800300a:	4613      	mov	r3, r2
 800300c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800300e:	e0a5      	b.n	800315c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003010:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003012:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003016:	f000 80a1 	beq.w	800315c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800301a:	f7fd fcdd 	bl	80009d8 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003026:	429a      	cmp	r2, r3
 8003028:	d302      	bcc.n	8003030 <UART_WaitOnFlagUntilTimeout+0x32>
 800302a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800302c:	2b00      	cmp	r3, #0
 800302e:	d13e      	bne.n	80030ae <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003038:	e853 3f00 	ldrex	r3, [r3]
 800303c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800303e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003040:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003044:	667b      	str	r3, [r7, #100]	; 0x64
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	461a      	mov	r2, r3
 800304c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800304e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003050:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003052:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003054:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003056:	e841 2300 	strex	r3, r2, [r1]
 800305a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800305c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1e6      	bne.n	8003030 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	3308      	adds	r3, #8
 8003068:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800306a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800306c:	e853 3f00 	ldrex	r3, [r3]
 8003070:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003074:	f023 0301 	bic.w	r3, r3, #1
 8003078:	663b      	str	r3, [r7, #96]	; 0x60
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	3308      	adds	r3, #8
 8003080:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003082:	64ba      	str	r2, [r7, #72]	; 0x48
 8003084:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003086:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003088:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800308a:	e841 2300 	strex	r3, r2, [r1]
 800308e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1e5      	bne.n	8003062 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2220      	movs	r2, #32
 800309a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2220      	movs	r2, #32
 80030a0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e067      	b.n	800317e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d04f      	beq.n	800315c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030ca:	d147      	bne.n	800315c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030d4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030de:	e853 3f00 	ldrex	r3, [r3]
 80030e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	461a      	mov	r2, r3
 80030f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f4:	637b      	str	r3, [r7, #52]	; 0x34
 80030f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030fc:	e841 2300 	strex	r3, r2, [r1]
 8003100:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1e6      	bne.n	80030d6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	3308      	adds	r3, #8
 800310e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	e853 3f00 	ldrex	r3, [r3]
 8003116:	613b      	str	r3, [r7, #16]
   return(result);
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	f023 0301 	bic.w	r3, r3, #1
 800311e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	3308      	adds	r3, #8
 8003126:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003128:	623a      	str	r2, [r7, #32]
 800312a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312c:	69f9      	ldr	r1, [r7, #28]
 800312e:	6a3a      	ldr	r2, [r7, #32]
 8003130:	e841 2300 	strex	r3, r2, [r1]
 8003134:	61bb      	str	r3, [r7, #24]
   return(result);
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1e5      	bne.n	8003108 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2220      	movs	r2, #32
 8003140:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2220      	movs	r2, #32
 8003146:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2220      	movs	r2, #32
 800314c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e010      	b.n	800317e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	69da      	ldr	r2, [r3, #28]
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	4013      	ands	r3, r2
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	429a      	cmp	r2, r3
 800316a:	bf0c      	ite	eq
 800316c:	2301      	moveq	r3, #1
 800316e:	2300      	movne	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	461a      	mov	r2, r3
 8003174:	79fb      	ldrb	r3, [r7, #7]
 8003176:	429a      	cmp	r2, r3
 8003178:	f43f af4a 	beq.w	8003010 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3770      	adds	r7, #112	; 0x70
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
	...

08003188 <__libc_init_array>:
 8003188:	b570      	push	{r4, r5, r6, lr}
 800318a:	4d0d      	ldr	r5, [pc, #52]	; (80031c0 <__libc_init_array+0x38>)
 800318c:	4c0d      	ldr	r4, [pc, #52]	; (80031c4 <__libc_init_array+0x3c>)
 800318e:	1b64      	subs	r4, r4, r5
 8003190:	10a4      	asrs	r4, r4, #2
 8003192:	2600      	movs	r6, #0
 8003194:	42a6      	cmp	r6, r4
 8003196:	d109      	bne.n	80031ac <__libc_init_array+0x24>
 8003198:	4d0b      	ldr	r5, [pc, #44]	; (80031c8 <__libc_init_array+0x40>)
 800319a:	4c0c      	ldr	r4, [pc, #48]	; (80031cc <__libc_init_array+0x44>)
 800319c:	f000 f820 	bl	80031e0 <_init>
 80031a0:	1b64      	subs	r4, r4, r5
 80031a2:	10a4      	asrs	r4, r4, #2
 80031a4:	2600      	movs	r6, #0
 80031a6:	42a6      	cmp	r6, r4
 80031a8:	d105      	bne.n	80031b6 <__libc_init_array+0x2e>
 80031aa:	bd70      	pop	{r4, r5, r6, pc}
 80031ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80031b0:	4798      	blx	r3
 80031b2:	3601      	adds	r6, #1
 80031b4:	e7ee      	b.n	8003194 <__libc_init_array+0xc>
 80031b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80031ba:	4798      	blx	r3
 80031bc:	3601      	adds	r6, #1
 80031be:	e7f2      	b.n	80031a6 <__libc_init_array+0x1e>
 80031c0:	08003438 	.word	0x08003438
 80031c4:	08003438 	.word	0x08003438
 80031c8:	08003438 	.word	0x08003438
 80031cc:	0800343c 	.word	0x0800343c

080031d0 <memset>:
 80031d0:	4402      	add	r2, r0
 80031d2:	4603      	mov	r3, r0
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d100      	bne.n	80031da <memset+0xa>
 80031d8:	4770      	bx	lr
 80031da:	f803 1b01 	strb.w	r1, [r3], #1
 80031de:	e7f9      	b.n	80031d4 <memset+0x4>

080031e0 <_init>:
 80031e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e2:	bf00      	nop
 80031e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031e6:	bc08      	pop	{r3}
 80031e8:	469e      	mov	lr, r3
 80031ea:	4770      	bx	lr

080031ec <_fini>:
 80031ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ee:	bf00      	nop
 80031f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031f2:	bc08      	pop	{r3}
 80031f4:	469e      	mov	lr, r3
 80031f6:	4770      	bx	lr
